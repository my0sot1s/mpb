// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marker/marker.proto

package marker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tags struct {
	Tags                 []*Tag   `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string   `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tags) Reset()         { *m = Tags{} }
func (m *Tags) String() string { return proto.CompactTextString(m) }
func (*Tags) ProtoMessage()    {}
func (*Tags) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_0f2b94d1a66cd9bb, []int{0}
}
func (m *Tags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tags.Unmarshal(m, b)
}
func (m *Tags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tags.Marshal(b, m, deterministic)
}
func (dst *Tags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tags.Merge(dst, src)
}
func (m *Tags) XXX_Size() int {
	return xxx_messageInfo_Tags.Size(m)
}
func (m *Tags) XXX_DiscardUnknown() {
	xxx_messageInfo_Tags.DiscardUnknown(m)
}

var xxx_messageInfo_Tags proto.InternalMessageInfo

func (m *Tags) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Tags) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Tags) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Tag struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string   `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Notes                []string `protobuf:"bytes,4,rep,name=notes,proto3" json:"notes,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_0f2b94d1a66cd9bb, []int{1}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tag) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Tag) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Tag) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Categories struct {
	Categories           []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Anchor               string      `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string      `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Categories) Reset()         { *m = Categories{} }
func (m *Categories) String() string { return proto.CompactTextString(m) }
func (*Categories) ProtoMessage()    {}
func (*Categories) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_0f2b94d1a66cd9bb, []int{2}
}
func (m *Categories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Categories.Unmarshal(m, b)
}
func (m *Categories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Categories.Marshal(b, m, deterministic)
}
func (dst *Categories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Categories.Merge(dst, src)
}
func (m *Categories) XXX_Size() int {
	return xxx_messageInfo_Categories.Size(m)
}
func (m *Categories) XXX_DiscardUnknown() {
	xxx_messageInfo_Categories.DiscardUnknown(m)
}

var xxx_messageInfo_Categories proto.InternalMessageInfo

func (m *Categories) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Categories) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Categories) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Category struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string   `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State                string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Created              int32    `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_0f2b94d1a66cd9bb, []int{3}
}
func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (dst *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(dst, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Category) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Category) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

type Groups struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string   `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Groups) Reset()         { *m = Groups{} }
func (m *Groups) String() string { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()    {}
func (*Groups) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_0f2b94d1a66cd9bb, []int{4}
}
func (m *Groups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups.Unmarshal(m, b)
}
func (m *Groups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups.Marshal(b, m, deterministic)
}
func (dst *Groups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups.Merge(dst, src)
}
func (m *Groups) XXX_Size() int {
	return xxx_messageInfo_Groups.Size(m)
}
func (m *Groups) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups.DiscardUnknown(m)
}

var xxx_messageInfo_Groups proto.InternalMessageInfo

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Groups) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Groups) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Group struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string   `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Target               string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Created              int32    `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	BonusPrice           float32  `protobuf:"fixed32,6,opt,name=bonus_price,json=bonusPrice,proto3" json:"bonus_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_0f2b94d1a66cd9bb, []int{5}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (dst *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(dst, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Group) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Group) GetBonusPrice() float32 {
	if m != nil {
		return m.BonusPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*Tags)(nil), "marker.Tags")
	proto.RegisterType((*Tag)(nil), "marker.Tag")
	proto.RegisterType((*Categories)(nil), "marker.Categories")
	proto.RegisterType((*Category)(nil), "marker.Category")
	proto.RegisterType((*Groups)(nil), "marker.Groups")
	proto.RegisterType((*Group)(nil), "marker.Group")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarkerStreamClient is the client API for MarkerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarkerStreamClient interface {
	// tag
	GetTags(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Tags, error)
	UpsertTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*common.ErrorMsg, error)
	// cate
	GetCategories(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Categories, error)
	UpsertCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*common.ErrorMsg, error)
	// group
	GetGroups(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Groups, error)
	UpsertGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*common.ErrorMsg, error)
}

type markerStreamClient struct {
	cc *grpc.ClientConn
}

func NewMarkerStreamClient(cc *grpc.ClientConn) MarkerStreamClient {
	return &markerStreamClient{cc}
}

func (c *markerStreamClient) GetTags(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) UpsertTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/UpsertTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) DeleteTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*common.ErrorMsg, error) {
	out := new(common.ErrorMsg)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) GetCategories(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) UpsertCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/UpsertCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) DeleteCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*common.ErrorMsg, error) {
	out := new(common.ErrorMsg)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) GetGroups(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) UpsertGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/UpsertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*common.ErrorMsg, error) {
	out := new(common.ErrorMsg)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarkerStreamServer is the server API for MarkerStream service.
type MarkerStreamServer interface {
	// tag
	GetTags(context.Context, *common.ReqQuery) (*Tags, error)
	UpsertTag(context.Context, *Tag) (*Tag, error)
	DeleteTag(context.Context, *Tag) (*common.ErrorMsg, error)
	// cate
	GetCategories(context.Context, *common.ReqQuery) (*Categories, error)
	UpsertCategory(context.Context, *Category) (*Category, error)
	DeleteCategory(context.Context, *Category) (*common.ErrorMsg, error)
	// group
	GetGroups(context.Context, *common.ReqQuery) (*Groups, error)
	UpsertGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *Group) (*common.ErrorMsg, error)
}

func RegisterMarkerStreamServer(s *grpc.Server, srv MarkerStreamServer) {
	s.RegisterService(&_MarkerStream_serviceDesc, srv)
}

func _MarkerStream_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).GetTags(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_UpsertTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).UpsertTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/UpsertTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).UpsertTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).DeleteTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).GetCategories(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_UpsertCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).UpsertCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/UpsertCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).UpsertCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).DeleteCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).GetGroups(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_UpsertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).UpsertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/UpsertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).UpsertGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).DeleteGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarkerStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marker.MarkerStream",
	HandlerType: (*MarkerStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTags",
			Handler:    _MarkerStream_GetTags_Handler,
		},
		{
			MethodName: "UpsertTag",
			Handler:    _MarkerStream_UpsertTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _MarkerStream_DeleteTag_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _MarkerStream_GetCategories_Handler,
		},
		{
			MethodName: "UpsertCategory",
			Handler:    _MarkerStream_UpsertCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _MarkerStream_DeleteCategory_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _MarkerStream_GetGroups_Handler,
		},
		{
			MethodName: "UpsertGroup",
			Handler:    _MarkerStream_UpsertGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MarkerStream_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marker/marker.proto",
}

func init() { proto.RegisterFile("marker/marker.proto", fileDescriptor_marker_0f2b94d1a66cd9bb) }

var fileDescriptor_marker_0f2b94d1a66cd9bb = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x8a, 0xd3, 0x40,
	0x18, 0x25, 0x4d, 0x9b, 0xb5, 0x5f, 0x76, 0xcb, 0x32, 0x2b, 0x4b, 0xc8, 0xcd, 0x86, 0x82, 0x50,
	0x15, 0xbb, 0xb2, 0xea, 0x13, 0xa8, 0xf4, 0x6a, 0x41, 0x63, 0xf7, 0x4a, 0x44, 0x66, 0x93, 0x8f,
	0x31, 0xd8, 0x66, 0xe2, 0xcc, 0xd7, 0x8b, 0xbe, 0x80, 0x8f, 0xe2, 0x4b, 0xf8, 0x72, 0x32, 0x3f,
	0xa9, 0x69, 0xa3, 0x42, 0xc1, 0xab, 0xc9, 0xf9, 0xbe, 0x33, 0x27, 0xe7, 0x84, 0x43, 0xe0, 0x62,
	0xcd, 0xd5, 0x57, 0x54, 0xd7, 0xee, 0x98, 0x37, 0x4a, 0x92, 0x64, 0x91, 0x43, 0xe9, 0x45, 0x21,
	0xd7, 0x6b, 0x59, 0x5f, 0xbb, 0xc3, 0x2d, 0xa7, 0x77, 0x30, 0x5c, 0x72, 0xa1, 0xd9, 0x15, 0x0c,
	0x89, 0x0b, 0x9d, 0x04, 0x59, 0x38, 0x8b, 0x6f, 0xe2, 0xb9, 0x57, 0x58, 0x72, 0x91, 0xdb, 0x05,
	0xbb, 0x84, 0x88, 0xd7, 0xc5, 0x17, 0xa9, 0x92, 0x41, 0x16, 0xcc, 0xc6, 0xb9, 0x47, 0xec, 0x21,
	0x8c, 0x48, 0x12, 0x5f, 0x25, 0xa1, 0x1d, 0x3b, 0x30, 0xfd, 0x08, 0xe1, 0x92, 0x0b, 0x36, 0x81,
	0x41, 0x55, 0x26, 0x81, 0xdd, 0x0c, 0xaa, 0x92, 0x25, 0x70, 0x52, 0x56, 0xba, 0x59, 0xf1, 0xad,
	0x57, 0x69, 0xa1, 0x91, 0xa9, 0x25, 0xa1, 0x4e, 0x86, 0x59, 0x68, 0x64, 0x2c, 0x30, 0x53, 0x4d,
	0x9c, 0x30, 0x19, 0x39, 0x71, 0x0b, 0xa6, 0x2b, 0x80, 0xd7, 0x9c, 0x50, 0x48, 0x55, 0xa1, 0x66,
	0xcf, 0x01, 0x8a, 0x1d, 0xf2, 0xfe, 0xcf, 0x5b, 0xff, 0x9e, 0xb7, 0xcd, 0x3b, 0x9c, 0x23, 0xa3,
	0x7c, 0x0f, 0xe0, 0x41, 0x2b, 0x73, 0x44, 0xa0, 0x0c, 0xe2, 0x12, 0x75, 0xa1, 0xaa, 0x86, 0x2a,
	0x59, 0x7b, 0xc9, 0xee, 0xe8, 0x77, 0xb8, 0x61, 0x27, 0x9c, 0x51, 0x2c, 0x14, 0x72, 0xc2, 0xd2,
	0x86, 0x1e, 0xe5, 0x2d, 0x9c, 0x7e, 0x82, 0x68, 0xa1, 0xe4, 0xa6, 0xd1, 0xec, 0x11, 0x44, 0xc2,
	0x3e, 0xf9, 0xb8, 0x67, 0x6d, 0x5c, 0xbb, 0xcf, 0xfd, 0xf2, 0xc8, 0x9c, 0x3f, 0x02, 0x18, 0xd9,
	0xfb, 0xff, 0x35, 0xe4, 0x25, 0x44, 0xc4, 0x95, 0x40, 0xf2, 0x29, 0x3d, 0xfa, 0x7b, 0x4c, 0x76,
	0x05, 0xf1, 0xbd, 0xac, 0x37, 0xfa, 0x73, 0xa3, 0xaa, 0x02, 0x93, 0x28, 0x0b, 0x66, 0x83, 0x1c,
	0xec, 0xe8, 0x9d, 0x99, 0xdc, 0xfc, 0x0c, 0xe1, 0xf4, 0xd6, 0xe6, 0xfd, 0x40, 0x0a, 0xf9, 0x9a,
	0x3d, 0x86, 0x93, 0x05, 0x92, 0xad, 0xf1, 0xf9, 0xdc, 0xb7, 0x3b, 0xc7, 0x6f, 0xef, 0x37, 0xa8,
	0xb6, 0xe9, 0x69, 0xa7, 0xca, 0xe6, 0xcb, 0x8d, 0xef, 0x1a, 0x8d, 0xca, 0xb0, 0x59, 0xb7, 0xe5,
	0x69, 0x17, 0xb0, 0x27, 0x30, 0x7e, 0x83, 0x2b, 0x24, 0xec, 0xd1, 0x76, 0x2f, 0x78, 0xab, 0x94,
	0x54, 0xb7, 0x5a, 0xb0, 0x57, 0x70, 0xb6, 0x40, 0xea, 0x14, 0xb2, 0xef, 0x81, 0x1d, 0xd4, 0xd1,
	0xb0, 0x5e, 0xc2, 0xc4, 0x39, 0xd9, 0x75, 0xab, 0x57, 0xda, 0xb4, 0x37, 0x31, 0xb7, 0x9c, 0xb1,
	0x7f, 0xde, 0x3a, 0xb4, 0xf8, 0x0c, 0xc6, 0x0b, 0x24, 0x5f, 0x9e, 0xbe, 0xbd, 0xc9, 0x5e, 0x7d,
	0x34, 0x7b, 0x0a, 0xb1, 0xb3, 0xe6, 0xea, 0xb0, 0xdf, 0xae, 0x74, 0x1f, 0xb2, 0x39, 0xc4, 0xce,
	0xd1, 0x1f, 0xc9, 0x3d, 0x2f, 0xf7, 0x91, 0xfd, 0xef, 0xbc, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x63, 0x02, 0xdb, 0xdc, 0xab, 0x04, 0x00, 0x00,
}
