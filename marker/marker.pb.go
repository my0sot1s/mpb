// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marker/marker.proto

package marker // import "github.com/my0sot1s/mpb/marker"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/my0sot1s/mpb/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tag_State int32

const (
	Tag_availabled Tag_State = 0
	Tag_deleted    Tag_State = 1
)

var Tag_State_name = map[int32]string{
	0: "availabled",
	1: "deleted",
}
var Tag_State_value = map[string]int32{
	"availabled": 0,
	"deleted":    1,
}

func (x Tag_State) String() string {
	return proto.EnumName(Tag_State_name, int32(x))
}
func (Tag_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{2, 0}
}

type Topic_TopicType int32

const (
	Topic_blog     Topic_TopicType = 0
	Topic_product  Topic_TopicType = 1
	Topic_category Topic_TopicType = 2
	Topic_group    Topic_TopicType = 3
)

var Topic_TopicType_name = map[int32]string{
	0: "blog",
	1: "product",
	2: "category",
	3: "group",
}
var Topic_TopicType_value = map[string]int32{
	"blog":     0,
	"product":  1,
	"category": 2,
	"group":    3,
}

func (x Topic_TopicType) String() string {
	return proto.EnumName(Topic_TopicType_name, int32(x))
}
func (Topic_TopicType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{5, 0}
}

type Topic_State int32

const (
	Topic_activated   Topic_State = 0
	Topic_inactivated Topic_State = 1
	Topic_deleted     Topic_State = 2
)

var Topic_State_name = map[int32]string{
	0: "activated",
	1: "inactivated",
	2: "deleted",
}
var Topic_State_value = map[string]int32{
	"activated":   0,
	"inactivated": 1,
	"deleted":     2,
}

func (x Topic_State) String() string {
	return proto.EnumName(Topic_State_name, int32(x))
}
func (Topic_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{5, 1}
}

type TagsResponse struct {
	Tags                 []*Tag   `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string   `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagsResponse) Reset()         { *m = TagsResponse{} }
func (m *TagsResponse) String() string { return proto.CompactTextString(m) }
func (*TagsResponse) ProtoMessage()    {}
func (*TagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{0}
}
func (m *TagsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagsResponse.Unmarshal(m, b)
}
func (m *TagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagsResponse.Marshal(b, m, deterministic)
}
func (dst *TagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagsResponse.Merge(dst, src)
}
func (m *TagsResponse) XXX_Size() int {
	return xxx_messageInfo_TagsResponse.Size(m)
}
func (m *TagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TagsResponse proto.InternalMessageInfo

func (m *TagsResponse) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TagsResponse) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *TagsResponse) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type TagsRequest struct {
	Anchor               string   `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Scope                string   `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderBy              string   `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagsRequest) Reset()         { *m = TagsRequest{} }
func (m *TagsRequest) String() string { return proto.CompactTextString(m) }
func (*TagsRequest) ProtoMessage()    {}
func (*TagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{1}
}
func (m *TagsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagsRequest.Unmarshal(m, b)
}
func (m *TagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagsRequest.Marshal(b, m, deterministic)
}
func (dst *TagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagsRequest.Merge(dst, src)
}
func (m *TagsRequest) XXX_Size() int {
	return xxx_messageInfo_TagsRequest.Size(m)
}
func (m *TagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TagsRequest proto.InternalMessageInfo

func (m *TagsRequest) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *TagsRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *TagsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TagsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type Tag struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string    `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Scope                string    `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Notes                []string  `protobuf:"bytes,4,rep,name=notes,proto3" json:"notes,omitempty"`
	Created              int64     `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	State                Tag_State `protobuf:"varint,5,opt,name=state,proto3,enum=marker.Tag_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{2}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tag) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Tag) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Tag) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Tag) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Tag) GetState() Tag_State {
	if m != nil {
		return m.State
	}
	return Tag_availabled
}

type TopicsResponse struct {
	Topics               []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicsResponse) Reset()         { *m = TopicsResponse{} }
func (m *TopicsResponse) String() string { return proto.CompactTextString(m) }
func (*TopicsResponse) ProtoMessage()    {}
func (*TopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{3}
}
func (m *TopicsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicsResponse.Unmarshal(m, b)
}
func (m *TopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicsResponse.Marshal(b, m, deterministic)
}
func (dst *TopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsResponse.Merge(dst, src)
}
func (m *TopicsResponse) XXX_Size() int {
	return xxx_messageInfo_TopicsResponse.Size(m)
}
func (m *TopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsResponse proto.InternalMessageInfo

func (m *TopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *TopicsResponse) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *TopicsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TopicsRequest struct {
	Anchor               string   `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Scope                string   `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderBy              string   `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicsRequest) Reset()         { *m = TopicsRequest{} }
func (m *TopicsRequest) String() string { return proto.CompactTextString(m) }
func (*TopicsRequest) ProtoMessage()    {}
func (*TopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{4}
}
func (m *TopicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicsRequest.Unmarshal(m, b)
}
func (m *TopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicsRequest.Marshal(b, m, deterministic)
}
func (dst *TopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsRequest.Merge(dst, src)
}
func (m *TopicsRequest) XXX_Size() int {
	return xxx_messageInfo_TopicsRequest.Size(m)
}
func (m *TopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsRequest proto.InternalMessageInfo

func (m *TopicsRequest) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *TopicsRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *TopicsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TopicsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type Topic struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scope                string          `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Type                 Topic_TopicType `protobuf:"varint,4,opt,name=type,proto3,enum=marker.Topic_TopicType" json:"type,omitempty"`
	TagsId               []string        `protobuf:"bytes,5,rep,name=tags_id,json=tagsId,proto3" json:"tags_id,omitempty"`
	Tags                 []*Tag          `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	PreUrl               string          `protobuf:"bytes,7,opt,name=pre_url,json=preUrl,proto3" json:"pre_url,omitempty"`
	Created              int64           `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Childrens            []*Topic        `protobuf:"bytes,9,rep,name=childrens,proto3" json:"childrens,omitempty"`
	State                Topic_State     `protobuf:"varint,10,opt,name=state,proto3,enum=marker.Topic_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_marker_e2654a871d4150d2, []int{5}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (dst *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(dst, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Topic) GetType() Topic_TopicType {
	if m != nil {
		return m.Type
	}
	return Topic_blog
}

func (m *Topic) GetTagsId() []string {
	if m != nil {
		return m.TagsId
	}
	return nil
}

func (m *Topic) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Topic) GetPreUrl() string {
	if m != nil {
		return m.PreUrl
	}
	return ""
}

func (m *Topic) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Topic) GetChildrens() []*Topic {
	if m != nil {
		return m.Childrens
	}
	return nil
}

func (m *Topic) GetState() Topic_State {
	if m != nil {
		return m.State
	}
	return Topic_activated
}

func init() {
	proto.RegisterType((*TagsResponse)(nil), "marker.TagsResponse")
	proto.RegisterType((*TagsRequest)(nil), "marker.TagsRequest")
	proto.RegisterType((*Tag)(nil), "marker.Tag")
	proto.RegisterType((*TopicsResponse)(nil), "marker.TopicsResponse")
	proto.RegisterType((*TopicsRequest)(nil), "marker.TopicsRequest")
	proto.RegisterType((*Topic)(nil), "marker.Topic")
	proto.RegisterEnum("marker.Tag_State", Tag_State_name, Tag_State_value)
	proto.RegisterEnum("marker.Topic_TopicType", Topic_TopicType_name, Topic_TopicType_value)
	proto.RegisterEnum("marker.Topic_State", Topic_State_name, Topic_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarkerStreamClient is the client API for MarkerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarkerStreamClient interface {
	// tag
	GetTags(ctx context.Context, in *TagsRequest, opts ...grpc.CallOption) (*TagsResponse, error)
	UpsertTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.Nil, error)
	// cate
	GetTopics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsResponse, error)
	GetTopic(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*Topic, error)
	UpsertTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*Topic, error)
	DeleteTopic(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.Nil, error)
}

type markerStreamClient struct {
	cc *grpc.ClientConn
}

func NewMarkerStreamClient(cc *grpc.ClientConn) MarkerStreamClient {
	return &markerStreamClient{cc}
}

func (c *markerStreamClient) GetTags(ctx context.Context, in *TagsRequest, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) UpsertTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/UpsertTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) DeleteTag(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.Nil, error) {
	out := new(common.Nil)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) GetTopics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsResponse, error) {
	out := new(TopicsResponse)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) GetTopic(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) UpsertTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/UpsertTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markerStreamClient) DeleteTopic(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.Nil, error) {
	out := new(common.Nil)
	err := c.cc.Invoke(ctx, "/marker.MarkerStream/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarkerStreamServer is the server API for MarkerStream service.
type MarkerStreamServer interface {
	// tag
	GetTags(context.Context, *TagsRequest) (*TagsResponse, error)
	UpsertTag(context.Context, *Tag) (*Tag, error)
	DeleteTag(context.Context, *common.ReqId) (*common.Nil, error)
	// cate
	GetTopics(context.Context, *TopicsRequest) (*TopicsResponse, error)
	GetTopic(context.Context, *common.ReqId) (*Topic, error)
	UpsertTopic(context.Context, *Topic) (*Topic, error)
	DeleteTopic(context.Context, *common.ReqId) (*common.Nil, error)
}

func RegisterMarkerStreamServer(s *grpc.Server, srv MarkerStreamServer) {
	s.RegisterService(&_MarkerStream_serviceDesc, srv)
}

func _MarkerStream_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).GetTags(ctx, req.(*TagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_UpsertTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).UpsertTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/UpsertTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).UpsertTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).DeleteTag(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).GetTopics(ctx, req.(*TopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).GetTopic(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_UpsertTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).UpsertTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/UpsertTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).UpsertTopic(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkerStream_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkerStreamServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marker.MarkerStream/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkerStreamServer).DeleteTopic(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarkerStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marker.MarkerStream",
	HandlerType: (*MarkerStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTags",
			Handler:    _MarkerStream_GetTags_Handler,
		},
		{
			MethodName: "UpsertTag",
			Handler:    _MarkerStream_UpsertTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _MarkerStream_DeleteTag_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _MarkerStream_GetTopics_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _MarkerStream_GetTopic_Handler,
		},
		{
			MethodName: "UpsertTopic",
			Handler:    _MarkerStream_UpsertTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _MarkerStream_DeleteTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marker/marker.proto",
}

func init() { proto.RegisterFile("marker/marker.proto", fileDescriptor_marker_e2654a871d4150d2) }

var fileDescriptor_marker_e2654a871d4150d2 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xe3, 0xd8, 0x8e, 0xaf, 0x9b, 0x7c, 0xf9, 0x26, 0xa5, 0x35, 0x59, 0x40, 0x14, 0x81,
	0x9a, 0xaa, 0x52, 0x02, 0xa1, 0x2b, 0xd8, 0x55, 0x48, 0xa8, 0x0b, 0x58, 0xb8, 0xe9, 0x06, 0x09,
	0x55, 0x13, 0x7b, 0xe4, 0x5a, 0xd8, 0x1e, 0x77, 0x3c, 0xa9, 0xe4, 0x17, 0xe2, 0x49, 0x78, 0x02,
	0x9e, 0x08, 0xcd, 0x8f, 0x13, 0x3b, 0xb4, 0x12, 0x2b, 0x36, 0x99, 0x9c, 0x7b, 0x67, 0xee, 0xb9,
	0x73, 0xcf, 0xf1, 0xc0, 0x28, 0xc3, 0xec, 0x3b, 0x61, 0x0b, 0xb5, 0xcc, 0x0b, 0x46, 0x39, 0x45,
	0xb6, 0x42, 0xe3, 0x51, 0x48, 0xb3, 0x8c, 0xe6, 0x0b, 0xb5, 0xa8, 0xe4, 0xf4, 0x1b, 0x1c, 0xae,
	0x70, 0x5c, 0x06, 0xa4, 0x2c, 0x68, 0x5e, 0x12, 0xf4, 0x12, 0xba, 0x1c, 0xc7, 0xa5, 0x6f, 0x4c,
	0xcc, 0x99, 0xb7, 0xf4, 0xe6, 0xba, 0xd2, 0x0a, 0xc7, 0x81, 0x4c, 0xa0, 0x63, 0xb0, 0x71, 0x1e,
	0xde, 0x51, 0xe6, 0x77, 0x26, 0xc6, 0xcc, 0x0d, 0x34, 0x42, 0x47, 0x60, 0x71, 0xca, 0x71, 0xea,
	0x9b, 0x32, 0xac, 0xc0, 0x34, 0x05, 0x4f, 0x95, 0xbf, 0xdf, 0x90, 0x92, 0x37, 0x0e, 0x1b, 0xfb,
	0x87, 0xcb, 0x90, 0x16, 0x44, 0xd7, 0x54, 0x40, 0x44, 0xd3, 0x24, 0x4b, 0xb8, 0x2c, 0x69, 0x05,
	0x0a, 0xa0, 0xe7, 0xd0, 0xa3, 0x2c, 0x22, 0xec, 0x76, 0x5d, 0xf9, 0x5d, 0xb9, 0xdd, 0x91, 0xf8,
	0xb2, 0x9a, 0xfe, 0x34, 0xc0, 0x5c, 0xe1, 0x18, 0x0d, 0xa0, 0x93, 0x44, 0x9a, 0xa2, 0x93, 0x44,
	0xc8, 0x07, 0x27, 0x4a, 0xca, 0x22, 0xc5, 0x95, 0x26, 0xa8, 0xe1, 0x8e, 0xd8, 0xdc, 0x23, 0xce,
	0x29, 0x27, 0xa5, 0xdf, 0x9d, 0x98, 0x22, 0x2a, 0x81, 0xa8, 0x12, 0x32, 0x82, 0x39, 0x89, 0x7c,
	0x7b, 0x62, 0xcc, 0xcc, 0xa0, 0x86, 0xe8, 0x14, 0xac, 0x92, 0x63, 0x4e, 0x7c, 0x6b, 0x62, 0xcc,
	0x06, 0xcb, 0xff, 0x1b, 0x53, 0x9b, 0x5f, 0x8b, 0x44, 0xa0, 0xf2, 0xd3, 0x57, 0x60, 0x49, 0x8c,
	0x06, 0x00, 0xf8, 0x01, 0x27, 0x29, 0x5e, 0xa7, 0x24, 0x1a, 0x1e, 0x20, 0x0f, 0x9c, 0x88, 0xa4,
	0x84, 0x93, 0x68, 0x68, 0x4c, 0x09, 0x0c, 0x56, 0xb4, 0x48, 0xc2, 0x9d, 0x2a, 0xaf, 0xc1, 0xe6,
	0x32, 0xa2, 0x75, 0xe9, 0x6f, 0x19, 0x44, 0x34, 0xd0, 0xc9, 0xbf, 0xd3, 0xc6, 0xaa, 0xb5, 0xc9,
	0xa1, 0x5f, 0xd3, 0xfc, 0x13, 0x75, 0x7e, 0x98, 0x60, 0x49, 0xc2, 0x3f, 0xf4, 0x41, 0xd0, 0xcd,
	0x71, 0x56, 0xd7, 0x97, 0xff, 0x9f, 0x50, 0xe6, 0x1c, 0xba, 0xbc, 0x2a, 0x88, 0x2c, 0x3d, 0x58,
	0x9e, 0xb4, 0xc6, 0xa0, 0x7e, 0x57, 0x55, 0x41, 0x02, 0xb9, 0x09, 0x9d, 0x80, 0x23, 0x2c, 0x7b,
	0x9b, 0x44, 0xbe, 0x25, 0x85, 0xb4, 0x05, 0xbc, 0x8a, 0xb6, 0x26, 0xb7, 0x9f, 0x32, 0xf9, 0x09,
	0x38, 0x05, 0x23, 0xb7, 0x1b, 0x96, 0xfa, 0x8e, 0x1a, 0x45, 0xc1, 0xc8, 0x0d, 0x4b, 0x9b, 0x1e,
	0xe8, 0xb5, 0x3d, 0x70, 0x0e, 0x6e, 0x78, 0x97, 0xa4, 0x11, 0x23, 0x79, 0xe9, 0xbb, 0x8f, 0xa9,
	0xb4, 0xcb, 0xa3, 0xb3, 0xda, 0x30, 0x20, 0xef, 0x31, 0x6a, 0xdf, 0xa3, 0x65, 0x99, 0x0f, 0xe0,
	0x6e, 0xef, 0x85, 0x7a, 0xd0, 0x5d, 0xa7, 0x34, 0x56, 0x86, 0x29, 0x18, 0x8d, 0x36, 0x21, 0x1f,
	0x1a, 0xe8, 0x10, 0x7a, 0x21, 0xe6, 0x24, 0xa6, 0xac, 0x1a, 0x76, 0x90, 0x0b, 0x56, 0xcc, 0xe8,
	0xa6, 0x18, 0x9a, 0xd3, 0x8b, 0xda, 0x6f, 0x7d, 0x70, 0x71, 0xc8, 0x93, 0x07, 0xd1, 0xea, 0xf0,
	0x00, 0xfd, 0x07, 0x5e, 0x92, 0xef, 0x02, 0x46, 0xd3, 0x7f, 0x9d, 0xe5, 0xaf, 0x0e, 0x1c, 0x7e,
	0x96, 0x0d, 0x5d, 0x73, 0x46, 0x70, 0x86, 0x2e, 0xc0, 0xf9, 0x44, 0xb8, 0xf8, 0x90, 0xd1, 0xa8,
	0x31, 0xac, 0xda, 0x38, 0xe3, 0xa3, 0x76, 0x70, 0x6b, 0x5a, 0xf7, 0xa6, 0x28, 0x09, 0x13, 0x07,
	0x51, 0x73, 0xc8, 0xe3, 0x26, 0x40, 0xa7, 0xe0, 0x7e, 0x94, 0xd4, 0x02, 0xf4, 0xe7, 0xfa, 0x75,
	0x0a, 0xc8, 0xfd, 0x55, 0x34, 0xf6, 0x6a, 0xf8, 0x25, 0x49, 0xd1, 0x7b, 0x70, 0x45, 0x17, 0xca,
	0xea, 0xcf, 0x5a, 0x23, 0xdb, 0x76, 0x72, 0xbc, 0x1f, 0xd6, 0xbd, 0xcc, 0xa0, 0x57, 0x9f, 0xdd,
	0xe7, 0x68, 0xab, 0x84, 0xce, 0xc1, 0xd3, 0x5d, 0xeb, 0xcd, 0xcd, 0xec, 0xfe, 0xe6, 0x33, 0xf0,
	0x74, 0xef, 0x8f, 0x55, 0x6e, 0x76, 0x7f, 0x39, 0xf9, 0xfa, 0x22, 0x4e, 0xf8, 0xdd, 0x66, 0x2d,
	0x82, 0x8b, 0xac, 0x7a, 0x53, 0x52, 0xfe, 0xb6, 0x5c, 0x64, 0xc5, 0x5a, 0xbf, 0xd6, 0x6b, 0x5b,
	0xbe, 0xc8, 0xef, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xef, 0xcc, 0x4f, 0x49, 0xc5, 0x05, 0x00,
	0x00,
}
