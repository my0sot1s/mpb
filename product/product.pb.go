// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product.proto

package product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqQuery struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor               string   `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	OrderBy              string   `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqQuery) Reset()         { *m = ReqQuery{} }
func (m *ReqQuery) String() string { return proto.CompactTextString(m) }
func (*ReqQuery) ProtoMessage()    {}
func (*ReqQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{0}
}
func (m *ReqQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqQuery.Unmarshal(m, b)
}
func (m *ReqQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqQuery.Marshal(b, m, deterministic)
}
func (dst *ReqQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqQuery.Merge(dst, src)
}
func (m *ReqQuery) XXX_Size() int {
	return xxx_messageInfo_ReqQuery.Size(m)
}
func (m *ReqQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ReqQuery proto.InternalMessageInfo

func (m *ReqQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReqQuery) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqQuery) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *ReqQuery) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type ReqId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqId) Reset()         { *m = ReqId{} }
func (m *ReqId) String() string { return proto.CompactTextString(m) }
func (*ReqId) ProtoMessage()    {}
func (*ReqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{1}
}
func (m *ReqId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqId.Unmarshal(m, b)
}
func (m *ReqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqId.Marshal(b, m, deterministic)
}
func (dst *ReqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqId.Merge(dst, src)
}
func (m *ReqId) XXX_Size() int {
	return xxx_messageInfo_ReqId.Size(m)
}
func (m *ReqId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqId proto.InternalMessageInfo

func (m *ReqId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Image struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Width                int32    `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{2}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Image) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Categories struct {
	Categories           []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Anchor               string      `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string      `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Categories) Reset()         { *m = Categories{} }
func (m *Categories) String() string { return proto.CompactTextString(m) }
func (*Categories) ProtoMessage()    {}
func (*Categories) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{3}
}
func (m *Categories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Categories.Unmarshal(m, b)
}
func (m *Categories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Categories.Marshal(b, m, deterministic)
}
func (dst *Categories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Categories.Merge(dst, src)
}
func (m *Categories) XXX_Size() int {
	return xxx_messageInfo_Categories.Size(m)
}
func (m *Categories) XXX_DiscardUnknown() {
	xxx_messageInfo_Categories.DiscardUnknown(m)
}

var xxx_messageInfo_Categories proto.InternalMessageInfo

func (m *Categories) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Categories) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Categories) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Category struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string   `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State                string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Created              int32    `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{4}
}
func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (dst *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(dst, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Category) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Category) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

type Groups struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string   `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Groups) Reset()         { *m = Groups{} }
func (m *Groups) String() string { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()    {}
func (*Groups) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{5}
}
func (m *Groups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups.Unmarshal(m, b)
}
func (m *Groups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups.Marshal(b, m, deterministic)
}
func (dst *Groups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups.Merge(dst, src)
}
func (m *Groups) XXX_Size() int {
	return xxx_messageInfo_Groups.Size(m)
}
func (m *Groups) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups.DiscardUnknown(m)
}

var xxx_messageInfo_Groups proto.InternalMessageInfo

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Groups) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Groups) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Group struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string   `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Target               string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Created              int32    `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	BonusPrice           float32  `protobuf:"fixed32,6,opt,name=bonus_price,json=bonusPrice,proto3" json:"bonus_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{6}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (dst *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(dst, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Group) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Group) GetBonusPrice() float32 {
	if m != nil {
		return m.BonusPrice
	}
	return 0
}

type Tags struct {
	Tags                 []*Tag   `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string   `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tags) Reset()         { *m = Tags{} }
func (m *Tags) String() string { return proto.CompactTextString(m) }
func (*Tags) ProtoMessage()    {}
func (*Tags) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{7}
}
func (m *Tags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tags.Unmarshal(m, b)
}
func (m *Tags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tags.Marshal(b, m, deterministic)
}
func (dst *Tags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tags.Merge(dst, src)
}
func (m *Tags) XXX_Size() int {
	return xxx_messageInfo_Tags.Size(m)
}
func (m *Tags) XXX_DiscardUnknown() {
	xxx_messageInfo_Tags.DiscardUnknown(m)
}

var xxx_messageInfo_Tags proto.InternalMessageInfo

func (m *Tags) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Tags) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Tags) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Tag struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display              string   `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Notes                []string `protobuf:"bytes,4,rep,name=notes,proto3" json:"notes,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{8}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tag) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Tag) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Tag) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Products struct {
	Products             []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Anchor               string     `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                string     `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Products) Reset()         { *m = Products{} }
func (m *Products) String() string { return proto.CompactTextString(m) }
func (*Products) ProtoMessage()    {}
func (*Products) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{9}
}
func (m *Products) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Products.Unmarshal(m, b)
}
func (m *Products) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Products.Marshal(b, m, deterministic)
}
func (dst *Products) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Products.Merge(dst, src)
}
func (m *Products) XXX_Size() int {
	return xxx_messageInfo_Products.Size(m)
}
func (m *Products) XXX_DiscardUnknown() {
	xxx_messageInfo_Products.DiscardUnknown(m)
}

var xxx_messageInfo_Products proto.InternalMessageInfo

func (m *Products) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *Products) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Products) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

type Product struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Images               []*Image    `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
	Description          string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Created              int32       `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	CategoriesId         []string    `protobuf:"bytes,6,rep,name=categories_id,json=categoriesId,proto3" json:"categories_id,omitempty"`
	Categories           []*Category `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	GroupsId             []string    `protobuf:"bytes,8,rep,name=groups_id,json=groupsId,proto3" json:"groups_id,omitempty"`
	Groups               []*Group    `protobuf:"bytes,9,rep,name=groups,proto3" json:"groups,omitempty"`
	State                string      `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	ShipmentId           string      `protobuf:"bytes,11,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	Shipment             *Shipment   `protobuf:"bytes,12,opt,name=shipment,proto3" json:"shipment,omitempty"`
	TagsId               []string    `protobuf:"bytes,13,rep,name=tags_id,json=tagsId,proto3" json:"tags_id,omitempty"`
	Tags                 []*Tag      `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	Price                int32       `protobuf:"varint,15,opt,name=price,proto3" json:"price,omitempty"`
	AverageRate          float32     `protobuf:"fixed32,16,opt,name=average_rate,json=averageRate,proto3" json:"average_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{10}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Product.Unmarshal(m, b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Product.Marshal(b, m, deterministic)
}
func (dst *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(dst, src)
}
func (m *Product) XXX_Size() int {
	return xxx_messageInfo_Product.Size(m)
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Product) GetCategoriesId() []string {
	if m != nil {
		return m.CategoriesId
	}
	return nil
}

func (m *Product) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Product) GetGroupsId() []string {
	if m != nil {
		return m.GroupsId
	}
	return nil
}

func (m *Product) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Product) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Product) GetShipmentId() string {
	if m != nil {
		return m.ShipmentId
	}
	return ""
}

func (m *Product) GetShipment() *Shipment {
	if m != nil {
		return m.Shipment
	}
	return nil
}

func (m *Product) GetTagsId() []string {
	if m != nil {
		return m.TagsId
	}
	return nil
}

func (m *Product) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Product) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetAverageRate() float32 {
	if m != nil {
		return m.AverageRate
	}
	return 0
}

type ShipmentBlock struct {
	Shipment             *Shipment          `protobuf:"bytes,1,opt,name=shipment,proto3" json:"shipment,omitempty"`
	Products             []*ShipmentProduct `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ShipmentBlock) Reset()         { *m = ShipmentBlock{} }
func (m *ShipmentBlock) String() string { return proto.CompactTextString(m) }
func (*ShipmentBlock) ProtoMessage()    {}
func (*ShipmentBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{11}
}
func (m *ShipmentBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShipmentBlock.Unmarshal(m, b)
}
func (m *ShipmentBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShipmentBlock.Marshal(b, m, deterministic)
}
func (dst *ShipmentBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentBlock.Merge(dst, src)
}
func (m *ShipmentBlock) XXX_Size() int {
	return xxx_messageInfo_ShipmentBlock.Size(m)
}
func (m *ShipmentBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentBlock proto.InternalMessageInfo

func (m *ShipmentBlock) GetShipment() *Shipment {
	if m != nil {
		return m.Shipment
	}
	return nil
}

func (m *ShipmentBlock) GetProducts() []*ShipmentProduct {
	if m != nil {
		return m.Products
	}
	return nil
}

type Shipment struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Notes                []string `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	BasicInfo            string   `protobuf:"bytes,4,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	Created              int32    `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	State                string   `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shipment) Reset()         { *m = Shipment{} }
func (m *Shipment) String() string { return proto.CompactTextString(m) }
func (*Shipment) ProtoMessage()    {}
func (*Shipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{12}
}
func (m *Shipment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shipment.Unmarshal(m, b)
}
func (m *Shipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shipment.Marshal(b, m, deterministic)
}
func (dst *Shipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shipment.Merge(dst, src)
}
func (m *Shipment) XXX_Size() int {
	return xxx_messageInfo_Shipment.Size(m)
}
func (m *Shipment) XXX_DiscardUnknown() {
	xxx_messageInfo_Shipment.DiscardUnknown(m)
}

var xxx_messageInfo_Shipment proto.InternalMessageInfo

func (m *Shipment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Shipment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shipment) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Shipment) GetBasicInfo() string {
	if m != nil {
		return m.BasicInfo
	}
	return ""
}

func (m *Shipment) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Shipment) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type ShipmentProduct struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId            string   `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Product              *Product `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Quantity             int32    `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Note                 string   `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	UnitPrice            int32    `protobuf:"varint,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Discount             float32  `protobuf:"fixed32,7,opt,name=discount,proto3" json:"discount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShipmentProduct) Reset()         { *m = ShipmentProduct{} }
func (m *ShipmentProduct) String() string { return proto.CompactTextString(m) }
func (*ShipmentProduct) ProtoMessage()    {}
func (*ShipmentProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{13}
}
func (m *ShipmentProduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShipmentProduct.Unmarshal(m, b)
}
func (m *ShipmentProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShipmentProduct.Marshal(b, m, deterministic)
}
func (dst *ShipmentProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentProduct.Merge(dst, src)
}
func (m *ShipmentProduct) XXX_Size() int {
	return xxx_messageInfo_ShipmentProduct.Size(m)
}
func (m *ShipmentProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentProduct.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentProduct proto.InternalMessageInfo

func (m *ShipmentProduct) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShipmentProduct) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *ShipmentProduct) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *ShipmentProduct) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ShipmentProduct) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *ShipmentProduct) GetUnitPrice() int32 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *ShipmentProduct) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

type ShipmentItems struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Notes                []string         `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	ShipmentProduct      *ShipmentProduct `protobuf:"bytes,4,opt,name=shipment_product,json=shipmentProduct,proto3" json:"shipment_product,omitempty"`
	Created              string           `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	State                string           `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Price                int32            `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	Discount             float32          `protobuf:"fixed32,8,opt,name=discount,proto3" json:"discount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShipmentItems) Reset()         { *m = ShipmentItems{} }
func (m *ShipmentItems) String() string { return proto.CompactTextString(m) }
func (*ShipmentItems) ProtoMessage()    {}
func (*ShipmentItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{14}
}
func (m *ShipmentItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShipmentItems.Unmarshal(m, b)
}
func (m *ShipmentItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShipmentItems.Marshal(b, m, deterministic)
}
func (dst *ShipmentItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentItems.Merge(dst, src)
}
func (m *ShipmentItems) XXX_Size() int {
	return xxx_messageInfo_ShipmentItems.Size(m)
}
func (m *ShipmentItems) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentItems.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentItems proto.InternalMessageInfo

func (m *ShipmentItems) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShipmentItems) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShipmentItems) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *ShipmentItems) GetShipmentProduct() *ShipmentProduct {
	if m != nil {
		return m.ShipmentProduct
	}
	return nil
}

func (m *ShipmentItems) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ShipmentItems) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ShipmentItems) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ShipmentItems) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

type OrderItems struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductsId           []string   `protobuf:"bytes,2,rep,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`
	Products             []*Product `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Quantity             int32      `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price                int32      `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	Discount             float32    `protobuf:"fixed32,6,opt,name=discount,proto3" json:"discount,omitempty"`
	CreatedAt            string     `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            string     `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OrderItems) Reset()         { *m = OrderItems{} }
func (m *OrderItems) String() string { return proto.CompactTextString(m) }
func (*OrderItems) ProtoMessage()    {}
func (*OrderItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{15}
}
func (m *OrderItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderItems.Unmarshal(m, b)
}
func (m *OrderItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderItems.Marshal(b, m, deterministic)
}
func (dst *OrderItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderItems.Merge(dst, src)
}
func (m *OrderItems) XXX_Size() int {
	return xxx_messageInfo_OrderItems.Size(m)
}
func (m *OrderItems) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderItems.DiscardUnknown(m)
}

var xxx_messageInfo_OrderItems proto.InternalMessageInfo

func (m *OrderItems) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderItems) GetProductsId() []string {
	if m != nil {
		return m.ProductsId
	}
	return nil
}

func (m *OrderItems) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *OrderItems) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderItems) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderItems) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *OrderItems) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *OrderItems) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type Order struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId           []string    `protobuf:"bytes,2,rep,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Customer             []*Customer `protobuf:"bytes,3,rep,name=customer,proto3" json:"customer,omitempty"`
	Price                int32       `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	OrderItems           *OrderItems `protobuf:"bytes,5,opt,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`
	Discount             float32     `protobuf:"fixed32,6,opt,name=discount,proto3" json:"discount,omitempty"`
	CreatedAt            string      `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            string      `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	State                string      `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{16}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetCustomerId() []string {
	if m != nil {
		return m.CustomerId
	}
	return nil
}

func (m *Order) GetCustomer() []*Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *Order) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetOrderItems() *OrderItems {
	if m != nil {
		return m.OrderItems
	}
	return nil
}

func (m *Order) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *Order) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Order) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Order) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Customer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fullname             string   `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Address              string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Created              string   `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	State                string   `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{17}
}
func (m *Customer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Customer.Unmarshal(m, b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
}
func (dst *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(dst, src)
}
func (m *Customer) XXX_Size() int {
	return xxx_messageInfo_Customer.Size(m)
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Customer) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Customer) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Customer) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type PaymentMethod struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentMethod) Reset()         { *m = PaymentMethod{} }
func (m *PaymentMethod) String() string { return proto.CompactTextString(m) }
func (*PaymentMethod) ProtoMessage()    {}
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{18}
}
func (m *PaymentMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethod.Unmarshal(m, b)
}
func (m *PaymentMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethod.Marshal(b, m, deterministic)
}
func (dst *PaymentMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethod.Merge(dst, src)
}
func (m *PaymentMethod) XXX_Size() int {
	return xxx_messageInfo_PaymentMethod.Size(m)
}
func (m *PaymentMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethod.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethod proto.InternalMessageInfo

func (m *PaymentMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentMethod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Invoice struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId              string         `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Order                *Order         `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	CustomerId           string         `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Customer             *Customer      `protobuf:"bytes,5,opt,name=customer,proto3" json:"customer,omitempty"`
	Pm                   *PaymentMethod `protobuf:"bytes,6,opt,name=pm,proto3" json:"pm,omitempty"`
	Note                 string         `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Price                int32          `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	State                string         `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt            string         `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            string         `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	RealPay              int32          `protobuf:"varint,12,opt,name=real_pay,json=realPay,proto3" json:"real_pay,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{19}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Invoice.Unmarshal(m, b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
}
func (dst *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(dst, src)
}
func (m *Invoice) XXX_Size() int {
	return xxx_messageInfo_Invoice.Size(m)
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Invoice) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Invoice) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *Invoice) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Invoice) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *Invoice) GetPm() *PaymentMethod {
	if m != nil {
		return m.Pm
	}
	return nil
}

func (m *Invoice) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Invoice) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Invoice) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Invoice) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Invoice) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Invoice) GetRealPay() int32 {
	if m != nil {
		return m.RealPay
	}
	return 0
}

type Campaigns struct {
	Campaigns            []*Campaign `protobuf:"bytes,1,rep,name=campaigns,proto3" json:"campaigns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Campaigns) Reset()         { *m = Campaigns{} }
func (m *Campaigns) String() string { return proto.CompactTextString(m) }
func (*Campaigns) ProtoMessage()    {}
func (*Campaigns) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{20}
}
func (m *Campaigns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Campaigns.Unmarshal(m, b)
}
func (m *Campaigns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Campaigns.Marshal(b, m, deterministic)
}
func (dst *Campaigns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaigns.Merge(dst, src)
}
func (m *Campaigns) XXX_Size() int {
	return xxx_messageInfo_Campaigns.Size(m)
}
func (m *Campaigns) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaigns.DiscardUnknown(m)
}

var xxx_messageInfo_Campaigns proto.InternalMessageInfo

func (m *Campaigns) GetCampaigns() []*Campaign {
	if m != nil {
		return m.Campaigns
	}
	return nil
}

type Campaign struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventName            string   `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Started              int32    `protobuf:"varint,3,opt,name=started,proto3" json:"started,omitempty"`
	Ended                int32    `protobuf:"varint,4,opt,name=ended,proto3" json:"ended,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Image                []*Image `protobuf:"bytes,6,rep,name=image,proto3" json:"image,omitempty"`
	State                string   `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Campaign) Reset()         { *m = Campaign{} }
func (m *Campaign) String() string { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()    {}
func (*Campaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_product_2919b1dce88c9e1f, []int{21}
}
func (m *Campaign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Campaign.Unmarshal(m, b)
}
func (m *Campaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Campaign.Marshal(b, m, deterministic)
}
func (dst *Campaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign.Merge(dst, src)
}
func (m *Campaign) XXX_Size() int {
	return xxx_messageInfo_Campaign.Size(m)
}
func (m *Campaign) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign proto.InternalMessageInfo

func (m *Campaign) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Campaign) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Campaign) GetStarted() int32 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Campaign) GetEnded() int32 {
	if m != nil {
		return m.Ended
	}
	return 0
}

func (m *Campaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Campaign) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Campaign) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqQuery)(nil), "product.ReqQuery")
	proto.RegisterType((*ReqId)(nil), "product.ReqId")
	proto.RegisterType((*Image)(nil), "product.Image")
	proto.RegisterType((*Categories)(nil), "product.Categories")
	proto.RegisterType((*Category)(nil), "product.Category")
	proto.RegisterType((*Groups)(nil), "product.Groups")
	proto.RegisterType((*Group)(nil), "product.Group")
	proto.RegisterType((*Tags)(nil), "product.Tags")
	proto.RegisterType((*Tag)(nil), "product.Tag")
	proto.RegisterType((*Products)(nil), "product.Products")
	proto.RegisterType((*Product)(nil), "product.Product")
	proto.RegisterType((*ShipmentBlock)(nil), "product.ShipmentBlock")
	proto.RegisterType((*Shipment)(nil), "product.Shipment")
	proto.RegisterType((*ShipmentProduct)(nil), "product.ShipmentProduct")
	proto.RegisterType((*ShipmentItems)(nil), "product.ShipmentItems")
	proto.RegisterType((*OrderItems)(nil), "product.OrderItems")
	proto.RegisterType((*Order)(nil), "product.Order")
	proto.RegisterType((*Customer)(nil), "product.Customer")
	proto.RegisterType((*PaymentMethod)(nil), "product.PaymentMethod")
	proto.RegisterType((*Invoice)(nil), "product.Invoice")
	proto.RegisterType((*Campaigns)(nil), "product.Campaigns")
	proto.RegisterType((*Campaign)(nil), "product.Campaign")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProdSerClient is the client API for ProdSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProdSerClient interface {
	// prod
	GetProducts(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Products, error)
	InsertProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	// tag
	GetTags(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Tags, error)
	InsertTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	// cate
	GetCategorys(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Categories, error)
	InsertCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	// group
	GetGroups(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Groups, error)
	InsertGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// shipment
	GetShipment(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ShipmentBlock, error)
	InsertShipment(ctx context.Context, in *ShipmentBlock, opts ...grpc.CallOption) (*ShipmentBlock, error)
	UpdateShipment(ctx context.Context, in *ShipmentBlock, opts ...grpc.CallOption) (*ShipmentBlock, error)
	DeleteShipment(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ShipmentBlock, error)
	// Campain
	GetCampaigns(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Campaigns, error)
	InsertCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
	UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
	DeleteCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
}

type prodSerClient struct {
	cc *grpc.ClientConn
}

func NewProdSerClient(cc *grpc.ClientConn) ProdSerClient {
	return &prodSerClient{cc}
}

func (c *prodSerClient) GetProducts(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/product.ProdSer/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) InsertProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product.ProdSer/InsertProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product.ProdSer/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) DeleteProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product.ProdSer/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) GetTags(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/product.ProdSer/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) InsertTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/product.ProdSer/InsertTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/product.ProdSer/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) DeleteTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/product.ProdSer/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) GetCategorys(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/product.ProdSer/GetCategorys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) InsertCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/product.ProdSer/InsertCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/product.ProdSer/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) DeleteCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/product.ProdSer/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) GetGroups(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/product.ProdSer/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) InsertGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/product.ProdSer/InsertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/product.ProdSer/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/product.ProdSer/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) GetShipment(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ShipmentBlock, error) {
	out := new(ShipmentBlock)
	err := c.cc.Invoke(ctx, "/product.ProdSer/GetShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) InsertShipment(ctx context.Context, in *ShipmentBlock, opts ...grpc.CallOption) (*ShipmentBlock, error) {
	out := new(ShipmentBlock)
	err := c.cc.Invoke(ctx, "/product.ProdSer/InsertShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) UpdateShipment(ctx context.Context, in *ShipmentBlock, opts ...grpc.CallOption) (*ShipmentBlock, error) {
	out := new(ShipmentBlock)
	err := c.cc.Invoke(ctx, "/product.ProdSer/UpdateShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) DeleteShipment(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ShipmentBlock, error) {
	out := new(ShipmentBlock)
	err := c.cc.Invoke(ctx, "/product.ProdSer/DeleteShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) GetCampaigns(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Campaigns, error) {
	out := new(Campaigns)
	err := c.cc.Invoke(ctx, "/product.ProdSer/GetCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) InsertCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/product.ProdSer/InsertCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/product.ProdSer/UpdateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodSerClient) DeleteCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/product.ProdSer/DeleteCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdSerServer is the server API for ProdSer service.
type ProdSerServer interface {
	// prod
	GetProducts(context.Context, *ReqQuery) (*Products, error)
	InsertProduct(context.Context, *Product) (*Product, error)
	UpdateProduct(context.Context, *Product) (*Product, error)
	DeleteProduct(context.Context, *Product) (*Product, error)
	// tag
	GetTags(context.Context, *ReqQuery) (*Tags, error)
	InsertTag(context.Context, *Tag) (*Tag, error)
	UpdateTag(context.Context, *Tag) (*Tag, error)
	DeleteTag(context.Context, *Tag) (*Tag, error)
	// cate
	GetCategorys(context.Context, *ReqQuery) (*Categories, error)
	InsertCategory(context.Context, *Category) (*Category, error)
	UpdateCategory(context.Context, *Category) (*Category, error)
	DeleteCategory(context.Context, *Category) (*Category, error)
	// group
	GetGroups(context.Context, *ReqQuery) (*Groups, error)
	InsertGroup(context.Context, *Group) (*Group, error)
	UpdateGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *Group) (*Group, error)
	// shipment
	GetShipment(context.Context, *ReqId) (*ShipmentBlock, error)
	InsertShipment(context.Context, *ShipmentBlock) (*ShipmentBlock, error)
	UpdateShipment(context.Context, *ShipmentBlock) (*ShipmentBlock, error)
	DeleteShipment(context.Context, *ReqId) (*ShipmentBlock, error)
	// Campain
	GetCampaigns(context.Context, *ReqQuery) (*Campaigns, error)
	InsertCampaign(context.Context, *Campaign) (*Campaign, error)
	UpdateCampaign(context.Context, *Campaign) (*Campaign, error)
	DeleteCampaign(context.Context, *Campaign) (*Campaign, error)
}

func RegisterProdSerServer(s *grpc.Server, srv ProdSerServer) {
	s.RegisterService(&_ProdSer_serviceDesc, srv)
}

func _ProdSer_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).GetProducts(ctx, req.(*ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_InsertProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).InsertProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/InsertProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).InsertProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).DeleteProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).GetTags(ctx, req.(*ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_InsertTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).InsertTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/InsertTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).InsertTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).DeleteTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_GetCategorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).GetCategorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/GetCategorys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).GetCategorys(ctx, req.(*ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_InsertCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).InsertCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/InsertCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).InsertCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).DeleteCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).GetGroups(ctx, req.(*ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_InsertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).InsertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/InsertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).InsertGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).DeleteGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_GetShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).GetShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/GetShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).GetShipment(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_InsertShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).InsertShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/InsertShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).InsertShipment(ctx, req.(*ShipmentBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_UpdateShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).UpdateShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/UpdateShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).UpdateShipment(ctx, req.(*ShipmentBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_DeleteShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).DeleteShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/DeleteShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).DeleteShipment(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_GetCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).GetCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/GetCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).GetCampaigns(ctx, req.(*ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_InsertCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).InsertCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/InsertCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).InsertCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/UpdateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).UpdateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdSer_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdSerServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdSer/DeleteCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdSerServer).DeleteCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProdSer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProdSer",
	HandlerType: (*ProdSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProdSer_GetProducts_Handler,
		},
		{
			MethodName: "InsertProduct",
			Handler:    _ProdSer_InsertProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProdSer_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProdSer_DeleteProduct_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _ProdSer_GetTags_Handler,
		},
		{
			MethodName: "InsertTag",
			Handler:    _ProdSer_InsertTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ProdSer_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ProdSer_DeleteTag_Handler,
		},
		{
			MethodName: "GetCategorys",
			Handler:    _ProdSer_GetCategorys_Handler,
		},
		{
			MethodName: "InsertCategory",
			Handler:    _ProdSer_InsertCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProdSer_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProdSer_DeleteCategory_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _ProdSer_GetGroups_Handler,
		},
		{
			MethodName: "InsertGroup",
			Handler:    _ProdSer_InsertGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ProdSer_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ProdSer_DeleteGroup_Handler,
		},
		{
			MethodName: "GetShipment",
			Handler:    _ProdSer_GetShipment_Handler,
		},
		{
			MethodName: "InsertShipment",
			Handler:    _ProdSer_InsertShipment_Handler,
		},
		{
			MethodName: "UpdateShipment",
			Handler:    _ProdSer_UpdateShipment_Handler,
		},
		{
			MethodName: "DeleteShipment",
			Handler:    _ProdSer_DeleteShipment_Handler,
		},
		{
			MethodName: "GetCampaigns",
			Handler:    _ProdSer_GetCampaigns_Handler,
		},
		{
			MethodName: "InsertCampaign",
			Handler:    _ProdSer_InsertCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _ProdSer_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _ProdSer_DeleteCampaign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}

// ManagerSerClient is the client API for ManagerSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerSerClient interface {
	// Order
	GetOrder(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Order, error)
	GetOrders(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (ManagerSer_GetOrdersClient, error)
	InsertOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	GetCustomer(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Customer, error)
	GetCustomers(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Customer, error)
	InsertCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	// Invoice
	GetInvoice(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Invoice, error)
	GetInvoices(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (ManagerSer_GetInvoicesClient, error)
	InsertInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error)
}

type managerSerClient struct {
	cc *grpc.ClientConn
}

func NewManagerSerClient(cc *grpc.ClientConn) ManagerSerClient {
	return &managerSerClient{cc}
}

func (c *managerSerClient) GetOrder(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSerClient) GetOrders(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (ManagerSer_GetOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManagerSer_serviceDesc.Streams[0], "/product.ManagerSer/GetOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerSerGetOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagerSer_GetOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type managerSerGetOrdersClient struct {
	grpc.ClientStream
}

func (x *managerSerGetOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerSerClient) InsertOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/InsertOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSerClient) GetCustomer(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSerClient) GetCustomers(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/GetCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSerClient) InsertCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/InsertCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSerClient) GetInvoice(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/GetInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSerClient) GetInvoices(ctx context.Context, in *ReqQuery, opts ...grpc.CallOption) (ManagerSer_GetInvoicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManagerSer_serviceDesc.Streams[1], "/product.ManagerSer/GetInvoices", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerSerGetInvoicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagerSer_GetInvoicesClient interface {
	Recv() (*Invoice, error)
	grpc.ClientStream
}

type managerSerGetInvoicesClient struct {
	grpc.ClientStream
}

func (x *managerSerGetInvoicesClient) Recv() (*Invoice, error) {
	m := new(Invoice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerSerClient) InsertInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/product.ManagerSer/InsertInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerSerServer is the server API for ManagerSer service.
type ManagerSerServer interface {
	// Order
	GetOrder(context.Context, *ReqId) (*Order, error)
	GetOrders(*ReqQuery, ManagerSer_GetOrdersServer) error
	InsertOrder(context.Context, *Order) (*Order, error)
	GetCustomer(context.Context, *ReqId) (*Customer, error)
	GetCustomers(context.Context, *ReqQuery) (*Customer, error)
	InsertCustomer(context.Context, *Customer) (*Customer, error)
	// Invoice
	GetInvoice(context.Context, *ReqId) (*Invoice, error)
	GetInvoices(*ReqQuery, ManagerSer_GetInvoicesServer) error
	InsertInvoice(context.Context, *Invoice) (*Invoice, error)
}

func RegisterManagerSerServer(s *grpc.Server, srv ManagerSerServer) {
	s.RegisterService(&_ManagerSer_serviceDesc, srv)
}

func _ManagerSer_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).GetOrder(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSer_GetOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerSerServer).GetOrders(m, &managerSerGetOrdersServer{stream})
}

type ManagerSer_GetOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type managerSerGetOrdersServer struct {
	grpc.ServerStream
}

func (x *managerSerGetOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _ManagerSer_InsertOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).InsertOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/InsertOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).InsertOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSer_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).GetCustomer(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSer_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/GetCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).GetCustomers(ctx, req.(*ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSer_InsertCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).InsertCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/InsertCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).InsertCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSer_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/GetInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).GetInvoice(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSer_GetInvoices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerSerServer).GetInvoices(m, &managerSerGetInvoicesServer{stream})
}

type ManagerSer_GetInvoicesServer interface {
	Send(*Invoice) error
	grpc.ServerStream
}

type managerSerGetInvoicesServer struct {
	grpc.ServerStream
}

func (x *managerSerGetInvoicesServer) Send(m *Invoice) error {
	return x.ServerStream.SendMsg(m)
}

func _ManagerSer_InsertInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSerServer).InsertInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ManagerSer/InsertInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSerServer).InsertInvoice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerSer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.ManagerSer",
	HandlerType: (*ManagerSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _ManagerSer_GetOrder_Handler,
		},
		{
			MethodName: "InsertOrder",
			Handler:    _ManagerSer_InsertOrder_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _ManagerSer_GetCustomer_Handler,
		},
		{
			MethodName: "GetCustomers",
			Handler:    _ManagerSer_GetCustomers_Handler,
		},
		{
			MethodName: "InsertCustomer",
			Handler:    _ManagerSer_InsertCustomer_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _ManagerSer_GetInvoice_Handler,
		},
		{
			MethodName: "InsertInvoice",
			Handler:    _ManagerSer_InsertInvoice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrders",
			Handler:       _ManagerSer_GetOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetInvoices",
			Handler:       _ManagerSer_GetInvoices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}

func init() { proto.RegisterFile("product.proto", fileDescriptor_product_2919b1dce88c9e1f) }

var fileDescriptor_product_2919b1dce88c9e1f = []byte{
	// 1536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0xd6, 0xd8, 0x1e, 0xcf, 0x4c, 0x79, 0xff, 0xd2, 0x59, 0x6d, 0x26, 0x46, 0x51, 0xcc, 0x10,
	0x85, 0x55, 0x20, 0x3f, 0xec, 0x6e, 0x22, 0x0e, 0x1c, 0x20, 0x41, 0xb2, 0x7c, 0x08, 0x2c, 0x93,
	0x00, 0x07, 0x24, 0xac, 0x5e, 0x4f, 0xaf, 0x3d, 0xc2, 0x9e, 0x71, 0x66, 0xda, 0x41, 0x7e, 0x01,
	0xc4, 0x9d, 0x47, 0x40, 0xe2, 0xc4, 0x7b, 0xf0, 0x02, 0x48, 0x3c, 0x04, 0x17, 0x6e, 0xb9, 0xa2,
	0xfe, 0x9d, 0xf6, 0xcc, 0x78, 0x77, 0xcd, 0xcf, 0xcd, 0x55, 0x5d, 0xdd, 0x53, 0x5f, 0xd5, 0x57,
	0xd5, 0xd5, 0x86, 0xed, 0x79, 0x96, 0x46, 0x8b, 0x11, 0x7d, 0x30, 0xcf, 0x52, 0x9a, 0x22, 0x47,
	0x8a, 0xc1, 0x08, 0xdc, 0x90, 0xbc, 0xfa, 0x62, 0x41, 0xb2, 0x25, 0xda, 0x81, 0x46, 0x1c, 0xf9,
	0x56, 0xcf, 0x3a, 0xf4, 0xc2, 0x46, 0x1c, 0xa1, 0x7d, 0xb0, 0xa7, 0xf1, 0x2c, 0xa6, 0x7e, 0xa3,
	0x67, 0x1d, 0xda, 0xa1, 0x10, 0xd0, 0x01, 0xb4, 0x71, 0x32, 0x9a, 0xa4, 0x99, 0xdf, 0xe4, 0x96,
	0x52, 0x42, 0x37, 0xc1, 0x4d, 0xb3, 0x88, 0x64, 0xc3, 0xb3, 0xa5, 0xdf, 0xe2, 0x2b, 0x0e, 0x97,
	0x9f, 0x2e, 0x83, 0x1b, 0x60, 0x87, 0xe4, 0xd5, 0x20, 0x2a, 0x7f, 0x21, 0xf8, 0x1a, 0xec, 0xc1,
	0x0c, 0x8f, 0x49, 0xe5, 0xd3, 0x7b, 0xd0, 0x5c, 0x64, 0x53, 0xfe, 0x61, 0x2f, 0x64, 0x3f, 0x99,
	0x33, 0xdf, 0xc7, 0x11, 0x9d, 0xf0, 0xaf, 0xda, 0xa1, 0x10, 0x98, 0x33, 0x13, 0x12, 0x8f, 0x27,
	0x94, 0x7f, 0xd2, 0x0e, 0xa5, 0x14, 0xcc, 0x00, 0x9e, 0x61, 0x4a, 0xc6, 0x69, 0x16, 0x93, 0x1c,
	0x7d, 0x00, 0x30, 0xd2, 0x92, 0x6f, 0xf5, 0x9a, 0x87, 0x9d, 0xa3, 0x6b, 0x0f, 0x54, 0x44, 0xa4,
	0xe1, 0x32, 0x34, 0x8c, 0x0c, 0x94, 0x8d, 0x15, 0x94, 0xfb, 0x60, 0xd3, 0x94, 0xe2, 0xa9, 0x04,
	0x2f, 0x84, 0xe0, 0x07, 0x0b, 0x5c, 0x75, 0x4c, 0x05, 0x8b, 0x0f, 0x4e, 0x14, 0xe7, 0xf3, 0x29,
	0x5e, 0xca, 0xb3, 0x94, 0x88, 0x7a, 0xd0, 0x89, 0x48, 0x3e, 0xca, 0xe2, 0x39, 0x8d, 0xd3, 0x44,
	0x1e, 0x69, 0xaa, 0xd8, 0xe7, 0x72, 0x8a, 0x29, 0x91, 0x11, 0x15, 0x02, 0x3b, 0x71, 0x94, 0x11,
	0x4c, 0x49, 0xe4, 0xdb, 0x1c, 0xb6, 0x12, 0x83, 0x6f, 0xa1, 0xdd, 0xcf, 0xd2, 0xc5, 0x3c, 0x47,
	0x77, 0xa1, 0x3d, 0xe6, 0xbf, 0x24, 0xde, 0x1d, 0x8d, 0x97, 0x1b, 0x84, 0x72, 0x75, 0x43, 0xa0,
	0xbf, 0x58, 0x60, 0xf3, 0xfd, 0xff, 0x29, 0xca, 0x03, 0x68, 0x53, 0x9c, 0x8d, 0x09, 0x95, 0x30,
	0xa5, 0xb4, 0x1e, 0x27, 0xba, 0x0d, 0x9d, 0xb3, 0x34, 0x59, 0xe4, 0xc3, 0x79, 0x16, 0x8f, 0x88,
	0xdf, 0xee, 0x59, 0x87, 0x8d, 0x10, 0xb8, 0xea, 0x94, 0x69, 0x82, 0xaf, 0xa0, 0xf5, 0x12, 0x8f,
	0x73, 0xd4, 0x83, 0x16, 0xc5, 0x63, 0x15, 0x84, 0x2d, 0x1d, 0x84, 0x97, 0x78, 0x1c, 0xf2, 0x95,
	0x0d, 0x03, 0xf0, 0x0d, 0x34, 0x5f, 0xe2, 0xf1, 0x06, 0xe8, 0xf7, 0xc1, 0x4e, 0x52, 0x4a, 0x72,
	0xbf, 0xd5, 0x6b, 0xb2, 0x63, 0xb8, 0x50, 0xe4, 0xd5, 0x36, 0xf2, 0x1a, 0x9c, 0x83, 0x7b, 0x2a,
	0xfc, 0xcb, 0xd1, 0xfb, 0xe0, 0x4a, 0x5f, 0x95, 0xf3, 0x7b, 0xda, 0x79, 0x69, 0x14, 0x6a, 0x8b,
	0x0d, 0x41, 0xfc, 0xd8, 0x02, 0x47, 0x9e, 0x51, 0x41, 0x82, 0xa0, 0x95, 0xe0, 0x19, 0x91, 0xe7,
	0xf0, 0xdf, 0x8c, 0x4b, 0x31, 0x2b, 0xd3, 0xdc, 0x6f, 0x96, 0xb8, 0xc4, 0xab, 0x37, 0x94, 0xab,
	0xe5, 0x4c, 0xb7, 0xaa, 0x99, 0x5e, 0x9f, 0xd1, 0x77, 0x60, 0xbb, 0x28, 0xbf, 0x61, 0x1c, 0xf9,
	0x6d, 0x1e, 0xaf, 0xad, 0x42, 0x39, 0x88, 0x4a, 0x85, 0xec, 0x5c, 0xa5, 0x90, 0xdf, 0x02, 0x4f,
	0x30, 0x9d, 0x9d, 0xe9, 0xf2, 0x33, 0x5d, 0xa1, 0x18, 0x44, 0x46, 0x91, 0x78, 0x17, 0x16, 0x89,
	0x4e, 0x17, 0x98, 0x65, 0x78, 0x1b, 0x3a, 0xf9, 0x24, 0x9e, 0xcf, 0x48, 0x42, 0xd9, 0xe1, 0x1d,
	0xbe, 0x06, 0x4a, 0x35, 0x88, 0xd0, 0x7d, 0x70, 0x95, 0xe4, 0x6f, 0xf5, 0xac, 0x15, 0x67, 0x5f,
	0xc8, 0x85, 0x50, 0x9b, 0xa0, 0x1b, 0xe0, 0x30, 0x46, 0xb2, 0xb3, 0xb6, 0xb9, 0xa3, 0x6d, 0x26,
	0x0e, 0x22, 0x4d, 0xe2, 0x9d, 0xb5, 0x24, 0xde, 0x07, 0x5b, 0x54, 0xc2, 0xae, 0xe8, 0x8e, 0x5c,
	0x40, 0x6f, 0xc3, 0x16, 0x7e, 0x4d, 0x32, 0x3c, 0x26, 0xc3, 0x8c, 0x79, 0xbf, 0xc7, 0xcb, 0xa4,
	0x23, 0x75, 0x21, 0xa3, 0x1c, 0x85, 0x6d, 0xe5, 0xc9, 0xd3, 0x69, 0x3a, 0xfa, 0x6e, 0xc5, 0x67,
	0xeb, 0x72, 0x9f, 0x4f, 0x0c, 0x9a, 0x36, 0xb8, 0x7b, 0x7e, 0xc5, 0xbc, 0x42, 0xd7, 0xe0, 0x27,
	0x0b, 0x5c, 0xb5, 0x7a, 0x25, 0x06, 0xea, 0x2a, 0x6a, 0x9a, 0x55, 0x74, 0x0b, 0xe0, 0x0c, 0xe7,
	0xf1, 0x68, 0x18, 0x27, 0xe7, 0xa9, 0xa4, 0x9b, 0xc7, 0x35, 0x83, 0xe4, 0x3c, 0xbd, 0x80, 0x6c,
	0x3a, 0x9f, 0x6d, 0xb3, 0xfc, 0xfe, 0xb0, 0x60, 0xb7, 0xe4, 0x73, 0xc5, 0xb9, 0x5b, 0x00, 0x12,
	0x05, 0x4b, 0x93, 0x70, 0xd1, 0x93, 0x9a, 0x41, 0x84, 0xee, 0x81, 0xba, 0x59, 0x79, 0xc5, 0xd5,
	0x15, 0xad, 0x32, 0x40, 0x5d, 0x70, 0x5f, 0x2d, 0x70, 0x42, 0x63, 0xba, 0x94, 0xb7, 0x97, 0x96,
	0x79, 0x0c, 0x52, 0xdd, 0x1e, 0xf8, 0x6f, 0xf6, 0xe9, 0x45, 0x12, 0x53, 0xa3, 0xe5, 0xd9, 0xa1,
	0xc7, 0x34, 0xbc, 0xe3, 0xb1, 0xe3, 0xa2, 0x38, 0x1f, 0xa5, 0x8b, 0x84, 0xfa, 0x0e, 0x4f, 0xb4,
	0x96, 0x83, 0xbf, 0xac, 0x22, 0xcd, 0x03, 0x4a, 0x66, 0xf9, 0xbf, 0x08, 0xfa, 0x33, 0xd8, 0xd3,
	0xac, 0x57, 0x58, 0x5b, 0x1c, 0xeb, 0xfa, 0xcc, 0xef, 0xe6, 0xa5, 0xb0, 0x96, 0x52, 0xe3, 0x5d,
	0x92, 0x9a, 0x82, 0xdf, 0x8e, 0xc9, 0x6f, 0x13, 0xb2, 0x5b, 0x82, 0xfc, 0xc6, 0x02, 0xf8, 0x9c,
	0xcd, 0x1f, 0xf5, 0x78, 0x6f, 0x43, 0x47, 0xb1, 0x51, 0x24, 0x92, 0x21, 0x54, 0xa9, 0x65, 0x35,
	0x67, 0xf6, 0xdf, 0xe6, 0xa5, 0xfd, 0xf7, 0xa2, 0x5c, 0x6a, 0xdf, 0xed, 0x75, 0xbe, 0xb7, 0x57,
	0x7d, 0x67, 0x99, 0x96, 0xe1, 0x18, 0x62, 0x91, 0x4c, 0x2f, 0xf4, 0xa4, 0xe6, 0x93, 0x95, 0xe5,
	0xb3, 0x25, 0x07, 0x5e, 0x2c, 0x3f, 0x5d, 0x06, 0x3f, 0x37, 0xc0, 0xe6, 0xc8, 0xeb, 0x40, 0x8f,
	0x16, 0x39, 0x4d, 0x67, 0x24, 0x33, 0x40, 0x2b, 0x95, 0x68, 0x58, 0x4a, 0x92, 0xa0, 0x8d, 0xee,
	0x2a, 0x17, 0x42, 0x6d, 0x52, 0x20, 0x6b, 0x99, 0xc8, 0x4e, 0xa0, 0x23, 0x06, 0xc1, 0x98, 0x45,
	0x9e, 0xa3, 0xee, 0x1c, 0x5d, 0xd7, 0xe7, 0x14, 0x49, 0x09, 0x21, 0x2d, 0x12, 0xf4, 0xbf, 0xc5,
	0xa3, 0x60, 0x94, 0x67, 0x16, 0xfb, 0xaf, 0x6c, 0x64, 0x53, 0x40, 0xca, 0x81, 0xea, 0x82, 0x7b,
	0xbe, 0x98, 0x4e, 0x8d, 0x8a, 0xd0, 0x32, 0x07, 0x3d, 0x49, 0x13, 0xa2, 0xae, 0x54, 0x2e, 0x30,
	0x2d, 0x99, 0xe1, 0x78, 0xaa, 0x06, 0x35, 0x2e, 0x30, 0x9a, 0xe3, 0x28, 0xca, 0x48, 0x9e, 0x2b,
	0x9a, 0x4b, 0xd1, 0x2c, 0x80, 0xf6, 0x9a, 0x02, 0x70, 0x4c, 0x77, 0x8f, 0x61, 0xfb, 0x14, 0x2f,
	0x59, 0x09, 0x3d, 0x27, 0x74, 0x92, 0x46, 0x57, 0x29, 0xe0, 0xe0, 0xcf, 0x06, 0x38, 0x83, 0xe4,
	0x75, 0xca, 0xb2, 0x52, 0xb6, 0xd7, 0xe3, 0xba, 0x6e, 0x63, 0x62, 0x5c, 0x1f, 0x44, 0xe8, 0x0e,
	0xd8, 0xfc, 0xa7, 0x6c, 0x61, 0x3b, 0xab, 0xa9, 0x0b, 0xc5, 0x62, 0x99, 0x4c, 0x02, 0xf7, 0x3a,
	0x32, 0xd9, 0xa5, 0x9b, 0xa4, 0x86, 0x4c, 0x77, 0xa1, 0x31, 0x9f, 0xf1, 0x60, 0x74, 0x8e, 0x0e,
	0x8a, 0x52, 0x33, 0x41, 0x87, 0x8d, 0xf9, 0x4c, 0xb7, 0x46, 0xc7, 0x68, 0x8d, 0x9a, 0x88, 0xae,
	0x49, 0xc4, 0xda, 0xc4, 0x97, 0xc8, 0x04, 0x17, 0x93, 0xa9, 0x53, 0x26, 0xd3, 0x4d, 0x70, 0x33,
	0x82, 0xa7, 0xc3, 0x39, 0x5e, 0xf2, 0x2b, 0xdd, 0x0e, 0x1d, 0x26, 0x9f, 0xe2, 0x65, 0xf0, 0x11,
	0x78, 0xcf, 0xf0, 0x6c, 0x8e, 0xe3, 0x71, 0x92, 0xa3, 0x87, 0xe0, 0x8d, 0x94, 0x50, 0xf3, 0xe2,
	0x10, 0x2b, 0x61, 0x61, 0x13, 0xfc, 0xc6, 0x9f, 0x10, 0x42, 0xaa, 0xbb, 0x75, 0xc8, 0x6b, 0xd6,
	0x70, 0x8d, 0x14, 0x7b, 0x5c, 0xf3, 0x19, 0xa3, 0xa4, 0x0f, 0x4e, 0x4e, 0x71, 0xc6, 0xc8, 0x24,
	0x5e, 0x47, 0x4a, 0xe4, 0xb4, 0x4c, 0x22, 0x12, 0xa9, 0x0a, 0xe5, 0x42, 0x79, 0x4e, 0xb3, 0xab,
	0x73, 0xda, 0x1d, 0xb0, 0xf9, 0x4c, 0xc7, 0xa7, 0xb0, 0xea, 0xc0, 0x27, 0x16, 0x8b, 0x00, 0xbb,
	0x46, 0x80, 0x8f, 0xde, 0x78, 0x62, 0xba, 0x7c, 0x41, 0x32, 0x74, 0x0c, 0x9d, 0x3e, 0xa1, 0x7a,
	0xa8, 0x2d, 0x42, 0xa0, 0x1e, 0x9d, 0xdd, 0x6b, 0xe5, 0xae, 0x9a, 0xa3, 0x63, 0xd8, 0x1e, 0x24,
	0x39, 0xc9, 0xf4, 0x6d, 0x51, 0xe9, 0xbc, 0xdd, 0x8a, 0x86, 0x6d, 0xfa, 0x72, 0x1e, 0x61, 0x4a,
	0x36, 0xdc, 0xf4, 0x29, 0x99, 0x92, 0xcd, 0x36, 0xbd, 0x07, 0x4e, 0x9f, 0x50, 0xfe, 0xba, 0xa8,
	0xc1, 0xb3, 0x6d, 0x4e, 0x67, 0x39, 0x7a, 0x17, 0x3c, 0x81, 0x85, 0xbd, 0x1a, 0x56, 0x26, 0xb7,
	0xee, 0x8a, 0xc4, 0x0c, 0x85, 0xff, 0x57, 0x30, 0x14, 0x3e, 0x5f, 0x66, 0xf8, 0x04, 0xb6, 0xfa,
	0x84, 0xaa, 0xa1, 0xb8, 0xd6, 0xd9, 0xeb, 0xe5, 0xd9, 0x99, 0x4d, 0xcc, 0x4f, 0x60, 0x47, 0xb8,
	0xac, 0x5f, 0xb4, 0xd5, 0x11, 0xbb, 0x5b, 0x55, 0xb1, 0x7d, 0x02, 0xc1, 0xe6, 0xfb, 0x04, 0xa0,
	0x0d, 0xf7, 0x3d, 0x04, 0xaf, 0x4f, 0xa8, 0x7c, 0xee, 0xd6, 0x80, 0xdb, 0x5d, 0x1d, 0xe6, 0x73,
	0x74, 0x1f, 0x3a, 0x02, 0x98, 0x7c, 0xc1, 0xae, 0xae, 0x77, 0x4b, 0x32, 0x33, 0x17, 0x78, 0xae,
	0x6c, 0x2e, 0x60, 0x5c, 0xcd, 0xfc, 0x31, 0xaf, 0x8c, 0x62, 0x08, 0x36, 0xfd, 0x1f, 0x44, 0xdd,
	0x83, 0xca, 0x2c, 0x25, 0xc6, 0xf3, 0x8f, 0x55, 0x72, 0xf4, 0xce, 0x35, 0x96, 0x17, 0x9d, 0x20,
	0x60, 0xfd, 0xe3, 0x13, 0x3e, 0x54, 0x09, 0xdb, 0xd8, 0xfb, 0xc7, 0x92, 0x92, 0xaa, 0x4b, 0xd6,
	0x64, 0x0d, 0x55, 0xba, 0xe4, 0x0a, 0x23, 0x65, 0x83, 0xac, 0xf6, 0xd2, 0x6e, 0x55, 0x65, 0x32,
	0x72, 0xd3, 0x7d, 0x8a, 0x91, 0x9b, 0xec, 0x3b, 0xfa, 0xbd, 0x09, 0xf0, 0x1c, 0x27, 0x78, 0x4c,
	0x32, 0xd6, 0xfc, 0xee, 0x81, 0xdb, 0x27, 0x54, 0x8e, 0x62, 0xa5, 0x08, 0x95, 0x2e, 0x55, 0xf4,
	0x88, 0x93, 0x99, 0xff, 0xae, 0x0d, 0x4b, 0xc9, 0xfe, 0x91, 0x55, 0xb0, 0xb9, 0xfc, 0x01, 0x2e,
	0xd7, 0x7c, 0x80, 0xf1, 0xad, 0x98, 0x78, 0x4a, 0xfe, 0x54, 0xaf, 0x66, 0x74, 0x22, 0x92, 0x25,
	0xc5, 0x4b, 0x9a, 0xb7, 0xde, 0x55, 0xe4, 0x4a, 0x69, 0xaa, 0x46, 0x75, 0xfb, 0x1e, 0x00, 0xf4,
	0x09, 0xd5, 0xd3, 0x4a, 0xc9, 0xbd, 0xa2, 0x0b, 0x2b, 0x8b, 0x13, 0x8e, 0x47, 0x4a, 0xb5, 0xce,
	0x55, 0xf6, 0x3c, 0xb2, 0x8a, 0xab, 0x45, 0x1d, 0x53, 0x31, 0xaa, 0x6e, 0x3b, 0x6b, 0xf3, 0xff,
	0x4c, 0x8f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x58, 0xa6, 0x36, 0xe6, 0x44, 0x15, 0x00, 0x00,
}
