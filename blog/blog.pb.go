// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blog/blog.proto

package blog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/my0sot1s/mpb/common"
import marker "github.com/my0sot1s/mpb/marker"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Blog_State int32

const (
	Blog_pendding   Blog_State = 0
	Blog_deleted    Blog_State = 1
	Blog_availabled Blog_State = 2
	Blog_hidden     Blog_State = 3
)

var Blog_State_name = map[int32]string{
	0: "pendding",
	1: "deleted",
	2: "availabled",
	3: "hidden",
}
var Blog_State_value = map[string]int32{
	"pendding":   0,
	"deleted":    1,
	"availabled": 2,
	"hidden":     3,
}

func (x Blog_State) String() string {
	return proto.EnumName(Blog_State_name, int32(x))
}
func (Blog_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{1, 0}
}

type Blogs struct {
	Blogs                []*Blog  `protobuf:"bytes,1,rep,name=blogs,proto3" json:"blogs,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blogs) Reset()         { *m = Blogs{} }
func (m *Blogs) String() string { return proto.CompactTextString(m) }
func (*Blogs) ProtoMessage()    {}
func (*Blogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{0}
}
func (m *Blogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blogs.Unmarshal(m, b)
}
func (m *Blogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blogs.Marshal(b, m, deterministic)
}
func (dst *Blogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blogs.Merge(dst, src)
}
func (m *Blogs) XXX_Size() int {
	return xxx_messageInfo_Blogs.Size(m)
}
func (m *Blogs) XXX_DiscardUnknown() {
	xxx_messageInfo_Blogs.DiscardUnknown(m)
}

var xxx_messageInfo_Blogs proto.InternalMessageInfo

func (m *Blogs) GetBlogs() []*Blog {
	if m != nil {
		return m.Blogs
	}
	return nil
}

func (m *Blogs) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Blogs) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Blog struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Author               string          `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Created              int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	State                string          `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	TagIds               []string        `protobuf:"bytes,9,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	Tags                 []*marker.Tag   `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Content              string          `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
	Banner               string          `protobuf:"bytes,12,opt,name=banner,proto3" json:"banner,omitempty"`
	Categories           []*marker.Topic `protobuf:"bytes,13,rep,name=categories,proto3" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Blog) Reset()         { *m = Blog{} }
func (m *Blog) String() string { return proto.CompactTextString(m) }
func (*Blog) ProtoMessage()    {}
func (*Blog) Descriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{1}
}
func (m *Blog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blog.Unmarshal(m, b)
}
func (m *Blog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blog.Marshal(b, m, deterministic)
}
func (dst *Blog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blog.Merge(dst, src)
}
func (m *Blog) XXX_Size() int {
	return xxx_messageInfo_Blog.Size(m)
}
func (m *Blog) XXX_DiscardUnknown() {
	xxx_messageInfo_Blog.DiscardUnknown(m)
}

var xxx_messageInfo_Blog proto.InternalMessageInfo

func (m *Blog) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Blog) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Blog) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Blog) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Blog) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Blog) GetTagIds() []string {
	if m != nil {
		return m.TagIds
	}
	return nil
}

func (m *Blog) GetTags() []*marker.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Blog) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Blog) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

func (m *Blog) GetCategories() []*marker.Topic {
	if m != nil {
		return m.Categories
	}
	return nil
}

type FileDatas struct {
	Files                []*FileData `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Anchor               string      `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                int32       `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FileDatas) Reset()         { *m = FileDatas{} }
func (m *FileDatas) String() string { return proto.CompactTextString(m) }
func (*FileDatas) ProtoMessage()    {}
func (*FileDatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{2}
}
func (m *FileDatas) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileDatas.Unmarshal(m, b)
}
func (m *FileDatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileDatas.Marshal(b, m, deterministic)
}
func (dst *FileDatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDatas.Merge(dst, src)
}
func (m *FileDatas) XXX_Size() int {
	return xxx_messageInfo_FileDatas.Size(m)
}
func (m *FileDatas) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDatas.DiscardUnknown(m)
}

var xxx_messageInfo_FileDatas proto.InternalMessageInfo

func (m *FileDatas) GetFiles() []*FileData {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *FileDatas) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *FileDatas) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type FileData struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Tags                 *marker.Tag         `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Created              int64               `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Media                []*common.MediaInfo `protobuf:"bytes,5,rep,name=media,proto3" json:"media,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FileData) Reset()         { *m = FileData{} }
func (m *FileData) String() string { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()    {}
func (*FileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{3}
}
func (m *FileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileData.Unmarshal(m, b)
}
func (m *FileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileData.Marshal(b, m, deterministic)
}
func (dst *FileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileData.Merge(dst, src)
}
func (m *FileData) XXX_Size() int {
	return xxx_messageInfo_FileData.Size(m)
}
func (m *FileData) XXX_DiscardUnknown() {
	xxx_messageInfo_FileData.DiscardUnknown(m)
}

var xxx_messageInfo_FileData proto.InternalMessageInfo

func (m *FileData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FileData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FileData) GetTags() *marker.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FileData) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *FileData) GetMedia() []*common.MediaInfo {
	if m != nil {
		return m.Media
	}
	return nil
}

type Notes struct {
	Notes                []*Note  `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	Anchor               string   `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notes) Reset()         { *m = Notes{} }
func (m *Notes) String() string { return proto.CompactTextString(m) }
func (*Notes) ProtoMessage()    {}
func (*Notes) Descriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{4}
}
func (m *Notes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notes.Unmarshal(m, b)
}
func (m *Notes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notes.Marshal(b, m, deterministic)
}
func (dst *Notes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notes.Merge(dst, src)
}
func (m *Notes) XXX_Size() int {
	return xxx_messageInfo_Notes.Size(m)
}
func (m *Notes) XXX_DiscardUnknown() {
	xxx_messageInfo_Notes.DiscardUnknown(m)
}

var xxx_messageInfo_Notes proto.InternalMessageInfo

func (m *Notes) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Notes) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Notes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Note struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content              string              `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Created              int64               `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Title                string              `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	PosX                 int32               `protobuf:"varint,5,opt,name=posX,proto3" json:"posX,omitempty"`
	PosY                 int32               `protobuf:"varint,6,opt,name=posY,proto3" json:"posY,omitempty"`
	Tags                 []*marker.Tag       `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Media                []*common.MediaInfo `protobuf:"bytes,7,rep,name=media,proto3" json:"media,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_blog_9576a72c4f2392f9, []int{5}
}
func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (dst *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(dst, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Note) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Note) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Note) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Note) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *Note) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *Note) GetTags() []*marker.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Note) GetMedia() []*common.MediaInfo {
	if m != nil {
		return m.Media
	}
	return nil
}

func init() {
	proto.RegisterType((*Blogs)(nil), "blog.Blogs")
	proto.RegisterType((*Blog)(nil), "blog.Blog")
	proto.RegisterType((*FileDatas)(nil), "blog.FileDatas")
	proto.RegisterType((*FileData)(nil), "blog.FileData")
	proto.RegisterType((*Notes)(nil), "blog.Notes")
	proto.RegisterType((*Note)(nil), "blog.Note")
	proto.RegisterEnum("blog.Blog_State", Blog_State_name, Blog_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlogStreamClient is the client API for BlogStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlogStreamClient interface {
	ListBlogs(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Blogs, error)
	GetBlogById(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*Blog, error)
	UpsertBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*Blog, error)
	DeleteBlog(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.ErrorMsg, error)
	ListFileDatas(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*FileDatas, error)
	InsertFile(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*FileData, error)
	DeleteFileData(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.ErrorMsg, error)
	ListNotes(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Notes, error)
	LockupNote(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Note, error)
	UpsertNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.ErrorMsg, error)
}

type blogStreamClient struct {
	cc *grpc.ClientConn
}

func NewBlogStreamClient(cc *grpc.ClientConn) BlogStreamClient {
	return &blogStreamClient{cc}
}

func (c *blogStreamClient) ListBlogs(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Blogs, error) {
	out := new(Blogs)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/ListBlogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) GetBlogById(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/GetBlogById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) UpsertBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/UpsertBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) DeleteBlog(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.ErrorMsg, error) {
	out := new(common.ErrorMsg)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/DeleteBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) ListFileDatas(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*FileDatas, error) {
	out := new(FileDatas)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/ListFileDatas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) InsertFile(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*FileData, error) {
	out := new(FileData)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/InsertFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) DeleteFileData(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.ErrorMsg, error) {
	out := new(common.ErrorMsg)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/DeleteFileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) ListNotes(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Notes, error) {
	out := new(Notes)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/ListNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) LockupNote(ctx context.Context, in *common.ReqQuery, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/LockupNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) UpsertNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/UpsertNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStreamClient) DeleteNote(ctx context.Context, in *common.ReqId, opts ...grpc.CallOption) (*common.ErrorMsg, error) {
	out := new(common.ErrorMsg)
	err := c.cc.Invoke(ctx, "/blog.BlogStream/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogStreamServer is the server API for BlogStream service.
type BlogStreamServer interface {
	ListBlogs(context.Context, *common.ReqQuery) (*Blogs, error)
	GetBlogById(context.Context, *common.ReqId) (*Blog, error)
	UpsertBlog(context.Context, *Blog) (*Blog, error)
	DeleteBlog(context.Context, *common.ReqId) (*common.ErrorMsg, error)
	ListFileDatas(context.Context, *common.ReqQuery) (*FileDatas, error)
	InsertFile(context.Context, *FileData) (*FileData, error)
	DeleteFileData(context.Context, *common.ReqId) (*common.ErrorMsg, error)
	ListNotes(context.Context, *common.ReqQuery) (*Notes, error)
	LockupNote(context.Context, *common.ReqQuery) (*Note, error)
	UpsertNote(context.Context, *Note) (*Note, error)
	DeleteNote(context.Context, *common.ReqId) (*common.ErrorMsg, error)
}

func RegisterBlogStreamServer(s *grpc.Server, srv BlogStreamServer) {
	s.RegisterService(&_BlogStream_serviceDesc, srv)
}

func _BlogStream_ListBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).ListBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/ListBlogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).ListBlogs(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_GetBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).GetBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/GetBlogById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).GetBlogById(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_UpsertBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).UpsertBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/UpsertBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).UpsertBlog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/DeleteBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).DeleteBlog(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_ListFileDatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).ListFileDatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/ListFileDatas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).ListFileDatas(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_InsertFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).InsertFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/InsertFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).InsertFile(ctx, req.(*FileData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_DeleteFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).DeleteFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/DeleteFileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).DeleteFileData(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/ListNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).ListNotes(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_LockupNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).LockupNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/LockupNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).LockupNote(ctx, req.(*common.ReqQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_UpsertNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).UpsertNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/UpsertNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).UpsertNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStream_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStreamServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogStream/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStreamServer).DeleteNote(ctx, req.(*common.ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlogStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogStream",
	HandlerType: (*BlogStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBlogs",
			Handler:    _BlogStream_ListBlogs_Handler,
		},
		{
			MethodName: "GetBlogById",
			Handler:    _BlogStream_GetBlogById_Handler,
		},
		{
			MethodName: "UpsertBlog",
			Handler:    _BlogStream_UpsertBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BlogStream_DeleteBlog_Handler,
		},
		{
			MethodName: "ListFileDatas",
			Handler:    _BlogStream_ListFileDatas_Handler,
		},
		{
			MethodName: "InsertFile",
			Handler:    _BlogStream_InsertFile_Handler,
		},
		{
			MethodName: "DeleteFileData",
			Handler:    _BlogStream_DeleteFileData_Handler,
		},
		{
			MethodName: "ListNotes",
			Handler:    _BlogStream_ListNotes_Handler,
		},
		{
			MethodName: "LockupNote",
			Handler:    _BlogStream_LockupNote_Handler,
		},
		{
			MethodName: "UpsertNote",
			Handler:    _BlogStream_UpsertNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _BlogStream_DeleteNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/blog.proto",
}

func init() { proto.RegisterFile("blog/blog.proto", fileDescriptor_blog_9576a72c4f2392f9) }

var fileDescriptor_blog_9576a72c4f2392f9 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x65, 0xbf, 0x92, 0x66, 0xd2, 0xa4, 0xc1, 0x45, 0x60, 0xe5, 0x42, 0x14, 0x55, 0x22, 0xaa,
	0x68, 0x2a, 0xca, 0x9d, 0x43, 0x55, 0x40, 0x91, 0x5a, 0x24, 0xb6, 0x20, 0xe8, 0xa9, 0x72, 0x62,
	0x77, 0x6b, 0x75, 0xb3, 0x0e, 0xb6, 0x8b, 0xd4, 0xff, 0xc1, 0xff, 0x42, 0xe2, 0xdf, 0x70, 0x43,
	0x1e, 0xef, 0xa6, 0x9b, 0x46, 0xa5, 0xea, 0x65, 0xd7, 0x6f, 0xde, 0xf8, 0xed, 0x78, 0xe6, 0x79,
	0x61, 0x6b, 0x9a, 0xab, 0x6c, 0xdf, 0x3d, 0xc6, 0x0b, 0xad, 0xac, 0x22, 0xb1, 0x5b, 0xf7, 0xb7,
	0x67, 0x6a, 0x3e, 0x57, 0xc5, 0xbe, 0x7f, 0x79, 0xaa, 0xbf, 0x3d, 0x67, 0xfa, 0x4a, 0xe8, 0x7d,
	0xff, 0xf2, 0xc1, 0xe1, 0x37, 0x48, 0x0e, 0x73, 0x95, 0x19, 0x32, 0x80, 0xc4, 0x6d, 0x35, 0x34,
	0x18, 0x44, 0xa3, 0xf6, 0x01, 0x8c, 0x51, 0xd4, 0x71, 0xa9, 0x27, 0xc8, 0x73, 0x68, 0xb0, 0x62,
	0x76, 0xa9, 0x34, 0x0d, 0x07, 0xc1, 0xa8, 0x95, 0x96, 0x88, 0x3c, 0x83, 0xc4, 0x2a, 0xcb, 0x72,
	0x1a, 0x0d, 0x82, 0x51, 0x92, 0x7a, 0x30, 0xfc, 0x1d, 0x42, 0xec, 0x76, 0x93, 0x2e, 0x84, 0x92,
	0xd3, 0x00, 0xb7, 0x84, 0x92, 0x63, 0xba, 0xb4, 0xb9, 0xc0, 0xf4, 0x56, 0xea, 0x01, 0x8a, 0x5f,
	0x5b, 0x27, 0xde, 0x28, 0xc5, 0x11, 0x11, 0x0a, 0xcd, 0x99, 0x16, 0xcc, 0x0a, 0x4e, 0x9b, 0x83,
	0x60, 0x14, 0xa5, 0x15, 0x74, 0x3a, 0xc6, 0x32, 0x2b, 0xe8, 0x86, 0xd7, 0x41, 0x40, 0x5e, 0x40,
	0xd3, 0xb2, 0xec, 0x5c, 0x72, 0x43, 0x5b, 0x83, 0xc8, 0x09, 0x59, 0x96, 0x4d, 0xb8, 0x21, 0x2f,
	0x21, 0xb6, 0x2c, 0x33, 0x14, 0xf0, 0x78, 0xed, 0x71, 0xd9, 0x85, 0x2f, 0x2c, 0x4b, 0x91, 0xc0,
	0x2f, 0xa9, 0xc2, 0x8a, 0xc2, 0xd2, 0x36, 0x2a, 0x56, 0xd0, 0xd5, 0x36, 0x65, 0x45, 0x21, 0x34,
	0xdd, 0xf4, 0xb5, 0x79, 0x44, 0xf6, 0x00, 0x66, 0xcc, 0x8a, 0x4c, 0x69, 0x29, 0x0c, 0xed, 0xa0,
	0x70, 0x67, 0x29, 0xac, 0x16, 0x72, 0x96, 0xd6, 0x12, 0x86, 0xef, 0x20, 0x39, 0xc5, 0x1a, 0x37,
	0x61, 0x63, 0x21, 0x0a, 0xce, 0x65, 0x91, 0xf5, 0x9e, 0x90, 0x36, 0x34, 0xb9, 0xc8, 0x85, 0x15,
	0xbc, 0x17, 0x90, 0x2e, 0x00, 0xfb, 0xc9, 0x64, 0xce, 0xa6, 0xb9, 0xe0, 0xbd, 0x90, 0x00, 0x34,
	0x2e, 0x25, 0xe7, 0xa2, 0xe8, 0x45, 0xc3, 0x73, 0x68, 0x7d, 0x90, 0xb9, 0x38, 0x62, 0x96, 0x19,
	0xb2, 0x03, 0xc9, 0x85, 0xcc, 0x45, 0x35, 0xae, 0xae, 0x1f, 0x57, 0xc5, 0xa7, 0x9e, 0x7c, 0xe4,
	0xc8, 0x7e, 0x05, 0xb0, 0x51, 0x29, 0xdc, 0x3f, 0xb6, 0xb0, 0x3e, 0xb6, 0xaa, 0xab, 0x4e, 0xe7,
	0xde, 0xae, 0x96, 0xf3, 0x8b, 0x57, 0xe7, 0xf7, 0x0a, 0x92, 0xb9, 0xe0, 0x92, 0xd1, 0x04, 0x4f,
	0xf0, 0x74, 0x5c, 0x9a, 0xf5, 0xc4, 0x05, 0x27, 0xc5, 0x85, 0x4a, 0x3d, 0xef, 0x2c, 0xfa, 0x49,
	0x59, 0x81, 0x16, 0x2d, 0xdc, 0x62, 0xd5, 0xa2, 0x8e, 0x4b, 0x3d, 0xf1, 0xc8, 0xf3, 0xfe, 0x09,
	0x20, 0x76, 0xbb, 0xd7, 0xce, 0x5a, 0xb3, 0x42, 0xb8, 0x6a, 0x85, 0xda, 0x71, 0xa2, 0x35, 0x3b,
	0xfa, 0xfe, 0xc4, 0xf5, 0xfe, 0x10, 0x88, 0x17, 0xca, 0x7c, 0xa7, 0x09, 0x7e, 0x17, 0xd7, 0x65,
	0xec, 0x0c, 0x8d, 0xee, 0x63, 0x67, 0x0f, 0xbb, 0x73, 0xd9, 0xad, 0xe6, 0xff, 0xbb, 0x75, 0xf0,
	0x37, 0x02, 0x70, 0xf7, 0xee, 0xd4, 0x6a, 0xc1, 0xe6, 0x64, 0x17, 0x5a, 0xc7, 0xd2, 0x58, 0x7f,
	0xc7, 0x7b, 0xd5, 0xae, 0x54, 0xfc, 0xf8, 0x7c, 0x2d, 0xf4, 0x4d, 0xbf, 0x7d, 0x7b, 0xcd, 0x0d,
	0x19, 0x41, 0xfb, 0xa3, 0xc0, 0xd4, 0xc3, 0x9b, 0x09, 0x27, 0x9d, 0x5a, 0xf6, 0x84, 0xf7, 0x6b,
	0x7f, 0x04, 0xb2, 0x03, 0xf0, 0x75, 0x61, 0x84, 0xc6, 0x64, 0x52, 0x63, 0x56, 0xb2, 0xf6, 0x00,
	0x8e, 0xd0, 0xd9, 0x88, 0xee, 0xc8, 0x2d, 0x6b, 0x79, 0xaf, 0xb5, 0xd2, 0x27, 0x26, 0x23, 0x07,
	0xd0, 0x71, 0xa5, 0xde, 0x7a, 0x7c, 0xbd, 0xdc, 0xad, 0x55, 0x9b, 0x1b, 0xf2, 0x1a, 0x60, 0x52,
	0xb8, 0x42, 0x5c, 0x88, 0xdc, 0xb9, 0x05, 0xfd, 0x3b, 0x98, 0xbc, 0x81, 0xae, 0x2f, 0x68, 0x19,
	0x79, 0xb0, 0xa8, 0xb2, 0x7f, 0xde, 0x80, 0xf7, 0xf6, 0xcf, 0xd3, 0xbb, 0x00, 0xc7, 0x6a, 0x76,
	0x75, 0xbd, 0x40, 0x53, 0xad, 0x27, 0xd7, 0x0c, 0x7b, 0xdb, 0x41, 0x44, 0x35, 0x66, 0x25, 0x6b,
	0xd9, 0x41, 0x44, 0x0f, 0x15, 0x3b, 0x6d, 0xe0, 0x3f, 0xfd, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb2, 0xcf, 0xc3, 0xae, 0x16, 0x06, 0x00, 0x00,
}
