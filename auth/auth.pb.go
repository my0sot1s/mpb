// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth/auth.proto

It has these top-level messages:
	Done
	SignatureReq
	EmailCodeConfirmed
	EmailConfirm
	Signature
	TokenRequest
	Token
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Done struct {
}

func (m *Done) Reset()                    { *m = Done{} }
func (m *Done) String() string            { return proto.CompactTextString(m) }
func (*Done) ProtoMessage()               {}
func (*Done) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SignatureReq struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	From string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
}

func (m *SignatureReq) Reset()                    { *m = SignatureReq{} }
func (m *SignatureReq) String() string            { return proto.CompactTextString(m) }
func (*SignatureReq) ProtoMessage()               {}
func (*SignatureReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignatureReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SignatureReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type EmailCodeConfirmed struct {
	Code  string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *EmailCodeConfirmed) Reset()                    { *m = EmailCodeConfirmed{} }
func (m *EmailCodeConfirmed) String() string            { return proto.CompactTextString(m) }
func (*EmailCodeConfirmed) ProtoMessage()               {}
func (*EmailCodeConfirmed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EmailCodeConfirmed) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *EmailCodeConfirmed) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type EmailConfirm struct {
	Email           string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Content         string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Subject         string `protobuf:"bytes,5,opt,name=subject" json:"subject,omitempty"`
	Code            string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	DurationExpired int64  `protobuf:"varint,4,opt,name=duration_expired,json=durationExpired" json:"duration_expired,omitempty"`
}

func (m *EmailConfirm) Reset()                    { *m = EmailConfirm{} }
func (m *EmailConfirm) String() string            { return proto.CompactTextString(m) }
func (*EmailConfirm) ProtoMessage()               {}
func (*EmailConfirm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EmailConfirm) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmailConfirm) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *EmailConfirm) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *EmailConfirm) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *EmailConfirm) GetDurationExpired() int64 {
	if m != nil {
		return m.DurationExpired
	}
	return 0
}

type Signature struct {
	Key     string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Created int64  `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Signature) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Signature) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type TokenRequest struct {
	Payload map[string]string `protobuf:"bytes,1,rep,name=payload" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TokenRequest) GetPayload() map[string]string {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Token struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Token) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Token) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Done)(nil), "auth.Done")
	proto.RegisterType((*SignatureReq)(nil), "auth.SignatureReq")
	proto.RegisterType((*EmailCodeConfirmed)(nil), "auth.EmailCodeConfirmed")
	proto.RegisterType((*EmailConfirm)(nil), "auth.EmailConfirm")
	proto.RegisterType((*Signature)(nil), "auth.Signature")
	proto.RegisterType((*TokenRequest)(nil), "auth.TokenRequest")
	proto.RegisterType((*Token)(nil), "auth.Token")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthProvider service

type AuthProviderClient interface {
	MakeToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error)
	RefreshToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	SendEmailConfirm(ctx context.Context, in *EmailConfirm, opts ...grpc.CallOption) (*Done, error)
	ConfirmedCode(ctx context.Context, in *EmailCodeConfirmed, opts ...grpc.CallOption) (*Done, error)
}

type authProviderClient struct {
	cc *grpc.ClientConn
}

func NewAuthProviderClient(cc *grpc.ClientConn) AuthProviderClient {
	return &authProviderClient{cc}
}

func (c *authProviderClient) MakeToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/auth.AuthProvider/MakeToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderClient) RefreshToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/auth.AuthProvider/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderClient) SendEmailConfirm(ctx context.Context, in *EmailConfirm, opts ...grpc.CallOption) (*Done, error) {
	out := new(Done)
	err := grpc.Invoke(ctx, "/auth.AuthProvider/SendEmailConfirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderClient) ConfirmedCode(ctx context.Context, in *EmailCodeConfirmed, opts ...grpc.CallOption) (*Done, error) {
	out := new(Done)
	err := grpc.Invoke(ctx, "/auth.AuthProvider/ConfirmedCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthProvider service

type AuthProviderServer interface {
	MakeToken(context.Context, *TokenRequest) (*Token, error)
	RefreshToken(context.Context, *Token) (*Token, error)
	SendEmailConfirm(context.Context, *EmailConfirm) (*Done, error)
	ConfirmedCode(context.Context, *EmailCodeConfirmed) (*Done, error)
}

func RegisterAuthProviderServer(s *grpc.Server, srv AuthProviderServer) {
	s.RegisterService(&_AuthProvider_serviceDesc, srv)
}

func _AuthProvider_MakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServer).MakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProvider/MakeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServer).MakeToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProvider_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProvider/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServer).RefreshToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProvider_SendEmailConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServer).SendEmailConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProvider/SendEmailConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServer).SendEmailConfirm(ctx, req.(*EmailConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProvider_ConfirmedCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailCodeConfirmed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServer).ConfirmedCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProvider/ConfirmedCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServer).ConfirmedCode(ctx, req.(*EmailCodeConfirmed))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthProvider",
	HandlerType: (*AuthProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeToken",
			Handler:    _AuthProvider_MakeToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthProvider_RefreshToken_Handler,
		},
		{
			MethodName: "SendEmailConfirm",
			Handler:    _AuthProvider_SendEmailConfirm_Handler,
		},
		{
			MethodName: "ConfirmedCode",
			Handler:    _AuthProvider_ConfirmedCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

func init() { proto.RegisterFile("auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xd6, 0xd6, 0x71, 0xab, 0x4c, 0xb6, 0x6a, 0xb4, 0xea, 0xc1, 0xca, 0x85, 0x60, 0x2e, 0x46,
	0x42, 0x41, 0x0a, 0xe2, 0xaf, 0x07, 0x24, 0x54, 0x72, 0x44, 0x54, 0x2e, 0xf7, 0x6a, 0xeb, 0x9d,
	0x60, 0x93, 0x64, 0xd7, 0x5d, 0xaf, 0x2b, 0xf2, 0x00, 0x3c, 0x03, 0xcf, 0xc5, 0x1b, 0xa1, 0xfd,
	0x71, 0xba, 0x11, 0x17, 0x6b, 0xbe, 0x6f, 0xbe, 0x6f, 0x66, 0x3c, 0x1e, 0xc3, 0x05, 0xef, 0x4d,
	0xfd, 0xda, 0x3e, 0x16, 0xad, 0x56, 0x46, 0xb1, 0x91, 0x8d, 0xf3, 0x53, 0x18, 0x7d, 0x51, 0x12,
	0xf3, 0x77, 0x40, 0x6f, 0x9b, 0x1f, 0x92, 0x9b, 0x5e, 0x63, 0x89, 0x0f, 0x8c, 0xc1, 0xa8, 0xe5,
	0xa6, 0xce, 0xc8, 0x9c, 0x14, 0xe3, 0xd2, 0xc5, 0x96, 0x5b, 0x6b, 0xb5, 0xcb, 0x4e, 0x3c, 0x67,
	0xe3, 0xfc, 0x13, 0xb0, 0xd5, 0x8e, 0x37, 0xdb, 0x6b, 0x25, 0xf0, 0x5a, 0xc9, 0x75, 0xa3, 0x77,
	0x28, 0xac, 0xb2, 0x52, 0x02, 0x07, 0xb7, 0x8d, 0xd9, 0x25, 0xa4, 0x68, 0x95, 0xc1, 0xee, 0x41,
	0xfe, 0x87, 0x00, 0x0d, 0x05, 0x9c, 0xf9, 0x49, 0x46, 0x22, 0x19, 0xcb, 0xe0, 0xac, 0x52, 0xd2,
	0xa0, 0x34, 0xc1, 0x3e, 0x40, 0x9b, 0xe9, 0xfa, 0xfb, 0x9f, 0x58, 0x99, 0x2c, 0xf5, 0x99, 0x00,
	0x0f, 0x43, 0x24, 0xd1, 0x10, 0x2f, 0x61, 0x2a, 0x7a, 0xcd, 0x4d, 0xa3, 0xe4, 0x1d, 0xfe, 0x6a,
	0x1b, 0x8d, 0x22, 0x1b, 0xcd, 0x49, 0x91, 0x94, 0x17, 0x03, 0xbf, 0xf2, 0x74, 0xfe, 0x1e, 0xc6,
	0x87, 0x8d, 0xb0, 0x29, 0x24, 0x1b, 0xdc, 0x87, 0xde, 0x36, 0x74, 0x13, 0x69, 0xe4, 0x06, 0x85,
	0x6b, 0x90, 0x94, 0x03, 0xcc, 0x7f, 0x13, 0xa0, 0xdf, 0xd5, 0x06, 0x65, 0x89, 0x0f, 0x3d, 0x76,
	0x86, 0x7d, 0x84, 0xb3, 0x96, 0xef, 0xb7, 0x8a, 0x8b, 0x8c, 0xcc, 0x93, 0x62, 0xb2, 0x7c, 0xb6,
	0x70, 0xdf, 0x21, 0x16, 0x2d, 0x6e, 0xbc, 0x62, 0x25, 0x8d, 0xde, 0x97, 0x83, 0x7e, 0x76, 0x05,
	0x34, 0x4e, 0x0c, 0x73, 0x90, 0xa7, 0x39, 0x2e, 0x21, 0x7d, 0xe4, 0xdb, 0x1e, 0x87, 0xb5, 0x3a,
	0x70, 0x75, 0xf2, 0x81, 0xe4, 0xdf, 0x20, 0x75, 0x1d, 0xd8, 0x73, 0xa0, 0xbc, 0xaa, 0xb0, 0xeb,
	0xee, 0x8c, 0xc5, 0xc1, 0x3d, 0xf1, 0x9c, 0x97, 0xbc, 0x80, 0x73, 0x8d, 0x6b, 0x8d, 0x5d, 0x1d,
	0x34, 0x7e, 0x69, 0x34, 0x90, 0x4e, 0xb4, 0xfc, 0x4b, 0x80, 0x7e, 0xee, 0x4d, 0x7d, 0xa3, 0xd5,
	0x63, 0x23, 0x50, 0xb3, 0x57, 0x30, 0xfe, 0xca, 0x37, 0xe8, 0x4b, 0xb0, 0xff, 0x5f, 0x6a, 0x36,
	0x89, 0x38, 0x56, 0x00, 0x2d, 0xa3, 0x72, 0x2c, 0x4e, 0x1e, 0x2b, 0x97, 0x30, 0xbd, 0x45, 0x29,
	0x8e, 0xee, 0x22, 0x94, 0x8f, 0xb9, 0x19, 0x78, 0xce, 0x1e, 0x30, 0x7b, 0x0b, 0xe7, 0x87, 0xfb,
	0xb3, 0xc7, 0xc8, 0xb2, 0x23, 0x43, 0x74, 0x9d, 0xb1, 0xed, 0xfe, 0xd4, 0xfd, 0x0c, 0x6f, 0xfe,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x61, 0x3e, 0x7d, 0x1f, 0x03, 0x00, 0x00,
}
